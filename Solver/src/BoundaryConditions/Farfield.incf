!
!///////////////////////////////////////////////////////////////////////////////////////////////////////
!
!    HORSES2D - A high-order discontinuous Galerkin spectral element solver.
!    Copyright (C) 2017  Juan Manzanero Torrico (juan.manzanero@upm.es)
!
!    This program is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    This program is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with this program.  If not, see <http://www.gnu.org/licenses/>.
!
!////////////////////////////////////////////////////////////////////////////////////////////////////////
!
!
!///////////////////////////////////////////////////////////////////////////////////
!
!           FARFIELD BC
!           -----------
!///////////////////////////////////////////////////////////////////////////////////
!
      subroutine FarfieldBC_Construct( self , marker , in_label)
         use Setup_class
         implicit none
         class(FarfieldBC_t)      :: self
         integer                   :: marker
         character(len=*)          :: in_label
         real(kind=RP), allocatable :: pressure
         real(kind=RP), allocatable :: Temperature
         real(kind=RP), allocatable :: Mach
         real(kind=RP), allocatable :: AngleOfAttack
         real(kind=RP)              :: rho
         real(kind=RP)              :: V
         character(len=STR_LEN_BC)  :: source

         call readValueInRegion( trim(Setup % bdry_file) , "pressure" , pressure , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Temperature", Temperature , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Mach" , Mach , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Angle of attack" , AngleOfAttack , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Use function" , source , in_label , "# end")
         
         if ( allocated(pressure) ) then
            pressure = pressure 
         else
            allocate(pressure)
            pressure = Setup % pressure_ref
         end if

         if ( allocated(Temperature) ) then
            Temperature = Temperature 
         else
            allocate(Temperature)
            Temperature = Setup % Temperature_ref
         end if

         if ( .not. allocated(Mach) ) then
            allocate(Mach)
            Mach = Dimensionless % Mach
         end if

         if ( allocated(AngleOfAttack) ) then
            AngleOfAttack = AngleOfAttack * PI / 180.0_RP
         else
            allocate(AngleOfAttack)
            AngleOfAttack = 0.0_RP
         end if
!
!        Associate the Boundary State
!        ----------------------------
         call AssociateBoundaryConditionFunction ( trim(source) , self % BoundaryState )         


         if ( .not. associated ( self % BoundaryState ) ) then
!
!           Construct the state vector
!           --------------------------
            V = Mach * sqrt( thermodynamics % Gamma * thermodynamics % R * Temperature )
            rho = pressure / ( thermodynamics % R * Temperature )

            associate ( gamma => Thermodynamics % Gamma , cv => Dimensionless % cv , gm1 => Thermodynamics % gm1 , gogm1 => Thermodynamics % gogm1 )
            self % q(IRHO) = rho
            self % q(IRHOU) = rho * V * cos(AngleOfAttack)
            self % q(IRHOV) = rho * V * sin(AngleOfAttack)
            self % q(IRHOE) = cv * pressure + 0.5_RP * rho * V * V
            end associate

            self % q = getDimensionlessVariables( self % q )
         end if

      end subroutine FarfieldBC_Construct

      subroutine FarfieldBC_Associate(self , edge)
         implicit none
         class(FarfieldBC_t)          :: self
         class(Edge_t)                 :: edge

         associate ( N => edge % spA % N )

         select type ( edge )
         
            type is (Edge_t)
               print*, "Only boundary edges are expected."
               stop "Stopped"
      
            type is (StraightBdryEdge_t)
               allocate( edge % uB(0:N,NCONS) )
               
               edge % inviscidBCType = self % WeakType

               edge % RiemannSolver => self % RiemannSolver

#ifdef NAVIER_STOKES
               allocate ( edge % uSB  ( 0:N , NCONS )  ) 
#endif
               
   
            type is (CurvedBdryEdge_t)
               allocate( edge % uB(0:N,NCONS) )

               edge % inviscidBCType = self % WeakType

               edge % RiemannSolver => self % RiemannSolver

#ifdef NAVIER_STOKES
               allocate ( edge % uSB  ( 0:N , NCONS )  ) 
#endif
         end select
         end associate
      end subroutine FarfieldBC_Associate

      subroutine FarfieldBC_UpdateSolution( self , edge , time)
         implicit none
         class(FarfieldBC_t) :: self
         class(Edge_t)       :: edge
         real(kind=RP)       :: time
!
!        ---------------
!        Local variables
!        ---------------
!
         integer             :: iXi
         integer             :: N
         real(kind=RP)       :: q(NCONS)
         real(kind=RP)       :: rhoL , vnL , uL , vL , pL , ML , aL
         real(kind=RP)       :: rhoR , uR , vR , pR
         real(kind=RP)       :: rhoInfty, uInfty, vInfty , pInfty
         real(kind=RP)       :: nInfty(NDIM)
!
!        *********************************************************************
!           This routine computes the "Right" state of a Farfield boundary
!          condition. Once this is done, the Riemann flux is computed
!          from the computed state, and the real boundary state. This
!          ficticial state is computed by means of the characteristics method
!          which yields in four cases:
!              * Supersonic inflow (Four entering characteristics)
!              * Subsonic inflow (Three entering characteristics)
!              * Subsonic outflow (One entering characteristics)
!              * Supersonic outflow (All characteristics leave the domain)
!        *********************************************************************
!
         associate ( gamma => Thermodynamics % gamma , gm1 => Thermodynamics % gm1 , cp => Dimensionless % cp , cv => Dimensionless % cv)


         N = edge % spA % N

         select type ( edge )
            type is (StraightBdryEdge_t) 
               do iXi = 0 , N
!
!                 Set the external state
!                 ----------------------
                  if ( associated ( self % BoundaryState ) ) then
                     q = self % BoundaryState( edge % x(1:NDIM , iXi) , time )
                  else  
                     q = self % q
                  end if
!
!                 Compute the infinity flow
!                 -------------------------
                  rhoInfty = q(IRHO)
                  uInfty   = q(IRHOU) / rhoInfty
                  vInfty   = q(IRHOV) / rhoInfty
                  pInfty   = gm1 * ( q(IRHOE) - 0.5_RP * q(IRHOU) * uInfty - 0.5_RP * q(IRHOV) * vInfty )
                  nInfty   = [uInfty,vInfty] / norm2([uInfty,vInfty])
!
!                 First stage: Determine the boundary flow character
!                 --------------------------------------------------
                  rhoL = edge % storage(1) % Q(iXi , IRHO)
                  uL  = edge % storage(1) % Q(iXi , IRHOU) / rhoL
                  vL  = edge % storage(1) % Q(iXi , IRHOV) / rhoL
                  vnL = uL * edge % n (IX , 0) + vL * edge % n(IY, 0)
                  pL  = gm1 * ( edge % storage(1) % Q(iXi , IRHOE) - 0.5_RP * edge % storage(1) % Q(iXi,IRHOU) * uL - 0.5_RP * edge % storage(1) % Q(iXi,IRHOV) * vL )
                  aL  = sqrt( gamma * pL / rhoL ) 
                  ML  = sqrt(uL*uL + vL*vL) / aL
!
!                 Second stage: Compute the "Right" state depending on the result
!                 ---------------------------------------------------------------
                  if ( vnL .lt. 0.0_RP ) then
!
!                    Entering fluid
!                    --------------   
                     if ( ML .gt. 1.0_RP ) then
!           
!                       Supersonic
!                       ----------
                        edge % uB(iXi , 1:NCONS)  = q

#ifdef NAVIER_STOKES
                        edge % uSB(iXi, 1:NCONS)  = q
#endif
                  
                     else
!
!                       Subsonic
!                       --------
                        pR = 0.5_RP * ( pL + pInfty - rhoL * aL * ( edge % n(IX,0) * (uL-uInfty) + edge % n(IY,0) * (vL - vInfty) ) )
                        rhoR = rhoInfty + (pR - pInfty) / (aL * aL)
                        uR = uInfty + edge % n(IX,0) * (pR-pInfty) / (aL * rhoL)
                        vR = vInfty + edge % n(IY,0) * (pR-pInfty) / (aL * rhoL) 
   
                        edge % uB(iXi , IRHO) = rhoR
                        edge % uB(iXi , IRHOU) = rhoR * uR
                        edge % uB(iXi , IRHOV) = rhoR * vR
                        edge % uB(iXi , IRHOE) = cv * pR + 0.5_RP * (edge % uB(iXi,IRHOU) * uR + edge % uB(iXi,IRHOV) * vR )

#ifdef NAVIER_STOKES
                        edge % uSB(iXi,:) = edge % uB(iXi,:) 
#endif
                     end if
   
                  else
!
!                    Leaving fluid
!                    -------------
                     if ( ML .gt. 1.0_RP ) then
!
!                       Supersonic
!                       ----------
                        edge % uB(iXi , 1:NCONS) = edge % storage(1) % Q(iXi, 1:NCONS)
#ifdef NAVIER_STOKES
                        edge % uSB(iXi,:) = edge % uB(iXi,:) 
#endif
   
                     else
!
!                       Subsonic
!                       --------
                        pR = pInfty
                        rhoR = rhoL + (pInfty - pL) / (aL * aL)
                        uR = uL - edge % n(IX , 0) * (pInfty - pL) / (rhoL * aL)
                        vR = vL - edge % n(IY , 0) * (pInfty - pL) / (rhoL * aL)
   
                        edge % uB(iXi , IRHO) = rhoR
                        edge % uB(iXi , IRHOU) = rhoR * uR
                        edge % uB(iXi , IRHOV) = rhoR * vR
                        edge % uB(iXi , IRHOE) = cv * pR + 0.5_RP * (edge % uB(iXi,IRHOU) * uR + edge % uB(iXi,IRHOV) * vR )
#ifdef NAVIER_STOKES
                        edge % uSB(iXi,:) = edge % uB(iXi,:) 
#endif
                  
                     end if
                  end if
               end do

            type is (CurvedBdryEdge_t) 
               do iXi = 0 , N
!
!                 Set the external state
!                 ----------------------
                  if ( associated ( self % BoundaryState ) ) then
                     q = self % BoundaryState( edge % x(1:NDIM , iXi) , time )
                  else  
                     q = self % q
                  end if
!
!                 Compute the infinity flow
!                 -------------------------
                  rhoInfty = q(IRHO)
                  uInfty   = q(IRHOU) / rhoInfty
                  vInfty   = q(IRHOV) / rhoInfty
                  pInfty   = gm1 * ( q(IRHOE) - 0.5_RP * q(IRHOU) * uInfty - 0.5_RP * q(IRHOV) * vInfty )
                  nInfty   = [uInfty,vInfty] / norm2([uInfty,vInfty])

!
!                 First stage: Determine the boundary flow character
!                 --------------------------------------------------
                  rhoL = edge % storage(1) % Q(iXi , IRHO)
                  uL  = edge % storage(1) % Q(iXi , IRHOU) / rhoL
                  vL  = edge % storage(1) % Q(iXi , IRHOV) / rhoL
                  vnL = uL * edge % n (IX , iXi) + vL * edge % n(IY, iXi)
                  pL  = gm1 * ( edge % storage(1) % Q(iXi , IRHOE) - 0.5_RP * edge % storage(1) % Q(iXi,IRHOU) * uL - 0.5_RP * edge % storage(1) % Q(iXi,IRHOV) * vL )
                  aL  = sqrt( gamma * pL / rhoL ) 
                  ML  = sqrt(uL*uL + vL*vL) / aL
!
!                 Second stage: Compute the "Right" state depending on the result
!                 ---------------------------------------------------------------
                  if ( vnL .lt. 0.0_RP ) then
!
!                    Entering fluid
!                    --------------   
                     if ( ML .gt. 1.0_RP ) then
!           
!                       Supersonic
!                       ----------
                        edge % uB(iXi , 1:NCONS)  = q
#ifdef NAVIER_STOKES
                        edge % uSB(iXi,:) = edge % uB(iXi,:) 
#endif
                  
                     else
!
!                       Subsonic
!                       --------
                        pR = 0.5_RP * ( pL + pInfty - rhoL * aL * ( edge % n(IX,iXi) * (uL-uInfty) + edge % n(IY,iXi) * (vL - vInfty) ) )
                        rhoR = rhoInfty + (pR - pInfty) / (aL * aL)
                        uR = uInfty + edge % n(IX,iXi) * (pR-pInfty) / (aL * rhoL)
                        vR = vInfty + edge % n(IY,iXi) * (pR-pInfty) / (aL * rhoL) 
   
                        edge % uB(iXi , IRHO) = rhoR
                        edge % uB(iXi , IRHOU) = rhoR * uR
                        edge % uB(iXi , IRHOV) = rhoR * vR
                        edge % uB(iXi , IRHOE) = cv * pR + 0.5_RP * (edge % uB(iXi,IRHOU) * uR + edge % uB(iXi,IRHOV) * vR )
#ifdef NAVIER_STOKES
                        edge % uSB(iXi,:) = edge % uB(iXi,:) 
#endif
   
                     end if
   
                  else
!
!                    Leaving fluid
!                    -------------
                     if ( ML .gt. 1.0_RP ) then
!
!                       Supersonic
!                       ----------
                        edge % uB(iXi , 1:NCONS) = edge % storage(1) % Q(iXi, 1:NCONS)

#ifdef NAVIER_STOKES
                        edge % uSB(iXi,:) = edge % uB(iXi,:) 
#endif
   
                     else
!
!                       Subsonic
!                       --------
                        pR = pInfty
                        rhoR = rhoL + (pInfty - pL) / (aL * aL)
                        uR = uL - edge % n(IX , iXi) * (pInfty - pL) / (rhoL * aL)
                        vR = vL - edge % n(IY , iXi) * (pInfty - pL) / (rhoL * aL)
   
                        edge % uB(iXi , IRHO) = rhoR
                        edge % uB(iXi , IRHOU) = rhoR * uR
                        edge % uB(iXi , IRHOV) = rhoR * vR
                        edge % uB(iXi , IRHOE) = cv * pR + 0.5_RP * (edge % uB(iXi,IRHOU) * uR + edge % uB(iXi,IRHOV) * vR )
#ifdef NAVIER_STOKES
                        edge % uSB(iXi,:) = edge % uB(iXi,:) 
#endif
                  
                     end if
                  end if
               end do 

            class default
         end select

         end associate
         
      end subroutine FarfieldBC_UpdateSolution
