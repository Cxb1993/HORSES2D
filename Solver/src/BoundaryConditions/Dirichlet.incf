!
!///////////////////////////////////////////////////////////////////////////////////////////////////////
!
!    HORSES2D - A high-order discontinuous Galerkin spectral element solver.
!    Copyright (C) 2017  Juan Manzanero Torrico (juan.manzanero@upm.es)
!
!    This program is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    This program is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with this program.  If not, see <http://www.gnu.org/licenses/>.
!
!////////////////////////////////////////////////////////////////////////////////////////////////////////
!
!
!///////////////////////////////////////////////////////////////////////////////////
!
!           DIRICHLET BC
!           ------------
!///////////////////////////////////////////////////////////////////////////////////
!
      subroutine DirichletBC_Construct( self , marker , in_label)
         use Setup_class
         implicit none
         class(DirichletBC_t)       :: self
         integer                    :: marker
         character(len=*)           :: in_label
         real(kind=RP), allocatable :: pressure
         real(kind=RP), allocatable :: Temperature
         real(kind=RP), allocatable :: Mach
         real(kind=RP), allocatable :: AngleOfAttack
         real(kind=RP)              :: rho
         real(kind=RP)              :: V
         character(len=STR_LEN_BC)  :: source

         call readValueInRegion( trim(Setup % bdry_file) , "pressure" , pressure , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Temperature", Temperature , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Mach" , Mach , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Angle of attack" , AngleOfAttack , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Use function" , source , in_label , "# end")
   
         self % BoundaryStateName = trim(source)
         
         if ( allocated(pressure) ) then
            pressure = pressure 
         else
            allocate(pressure)
            pressure = Setup % pressure_ref 
         end if

         if ( allocated(Temperature) ) then
            Temperature = Temperature 
         else
            allocate(Temperature)
            Temperature = Setup % Temperature_ref
         end if

         if ( .not. allocated(Mach) ) then
            allocate(Mach)
            Mach = Dimensionless % Mach
         end if

         if ( allocated(AngleOfAttack) ) then
            AngleOfAttack = AngleOfAttack * PI / 180.0_RP
         else
            allocate(AngleOfAttack)
            AngleOfAttack = 0.0_RP
         end if
!
!        Associate the Boundary State
!        ----------------------------
         call AssociateBoundaryConditionFunction ( trim(source) , self % BoundaryState )

         if ( .not. associated(self % BoundaryState) ) then
            V = Mach * sqrt( thermodynamics % Gamma * thermodynamics % R * Temperature )
            rho = pressure / ( thermodynamics % R * Temperature ) 
   !
   !        Construct the state vector
   !        --------------------------
            associate ( gamma => Thermodynamics % Gamma , cv => Dimensionless % cv)
            self % q(IRHO ) = rho
            self % q(IRHOU) = rho * V * cos(AngleOfAttack)
            self % q(IRHOV) = rho * V * sin(AngleOfAttack)
            self % q(IRHOE) = cv * pressure + 0.5_RP * rho * V * V
            end associate

            self % q = getDimensionlessVariables( self % q ) 

         end if

      end subroutine DirichletBC_Construct

      subroutine DirichletBC_Associate(self , edge)
         implicit none
         class(DirichletBC_t)          :: self
         class(Edge_t)                 :: edge
         integer                       :: i

         associate ( N => edge % spA % N )

         select type ( edge )
         
            type is (Edge_t)
               print*, "Only boundary edges are expected."
               stop "Stopped"
      
            type is (StraightBdryEdge_t)
               allocate ( edge % uB  ( NCONS , 0:N )  ) 
               
               edge % inviscidBCType = self % WeakType

               edge % RiemannSolver => self % RiemannSolver

               if ( .not. associated ( self % BoundaryState ) ) then
                  do i = 0 , N
                     edge % uB(:,i) = self % q
                  end do

               end if

#ifdef NAVIER_STOKES
               allocate ( edge % uSB  ( NCONS , 0:N )  ) 
#endif

            type is (CurvedBdryEdge_t)
               allocate ( edge % uB  ( NCONS , 0:N )  ) 

               edge % inviscidBCType = self % WeakType

               edge % RiemannSolver => self % RiemannSolver

               if ( .not. associated ( self % BoundaryState ) ) then
                  do i = 0 , N
                     edge % uB(:,i) = self % q
                  end do

               end if

#ifdef NAVIER_STOKES
               allocate ( edge % uSB  ( NCONS , 0:N )  ) 
#endif

         end select
         end associate

      end subroutine DirichletBC_Associate

      subroutine DirichletBC_UpdateSolution( self , edge , time)
         implicit none
         class(DirichletBC_t)          :: self
         class(Edge_t)                 :: edge
         real(kind=RP)                 :: time
!
!        ---------------
!        Local variables
!        ---------------
!
         integer                  :: iXi
         integer                  :: N
         real(kind=RP)            :: rhoL , vnL , uL , vL , pL , ML , aL 
         real(kind=RP)            :: pR
         real(kind=RP)            :: q(NCONS)
!
         associate ( gamma => Thermodynamics % gamma , gm1 => Thermodynamics % gm1 , cp => Dimensionless % cp , cv => Dimensionless % cv)

         N = edge % spA % N

         select type ( edge )
            type is (StraightBdryEdge_t) 

               do ixi = 0 , N
!
!                 Get uB if comes from a Boundary State function
!                 ----------------------------------------------
                  if ( associated ( self % BoundaryState ) ) then
                     edge % uB(:,iXi) = self % BoundaryState( edge % x(1:NDIM , iXi) , time )
                  end if
#ifdef NAVIER_STOKES
!
!                 first stage: determine the boundary flow character
!                 --------------------------------------------------
                  rhoL = edge % storage(1) % Q(IRHO , iXi)
                  uL  = edge % storage(1) % Q(IRHOU , iXi) / rhoL
                  vL  = edge % storage(1) % Q(IRHOV , iXi) / rhoL
                  vnL = uL * edge % n (IX , 0) + vL * edge % n(IY, 0)
                  pL  = gm1 * ( edge % storage(1) % Q(IRHOE , iXi) - 0.5_RP * &
                        ( edge % storage(1) % Q(IRHOU,iXi) * uL + edge % storage(1) % Q(IRHOV,iXi) * vL ) )
                  aL  = sqrt( gamma * pL / rhoL ) 
                  ML  = sqrt(uL * uL + vL * vL) / aL
!
!                 second stage: compute the "right" state depending on the result
!                 ---------------------------------------------------------------
                  if ( vnL .le. 0.0_RP ) then
!
!                    Entering fluid
!                    --------------
                     if ( ML .gt. 1.0_RP ) then
!
!                       Supersonic
!                       ----------
                        edge % uSB(:,iXi) = edge % uB(:,iXi)
                        edge % viscousBCType(iXi) = DIRICHLET
      
                     else
!  
!                       Subsonic
!                       --------
                        pR = pL

                        edge % uSB(IRHO  , iXi) = edge % uB(IRHO  , iXi)
                        edge % uSB(IRHOU , iXi) = edge % uB(IRHOU , iXi)
                        edge % uSB(IRHOV , iXi) = edge % uB(IRHOV , iXi)
                        edge % uSB(IRHOE , iXi) =   cv * pR      & 
                                                + 0.5_RP * ( edge % uSB(IRHOU , iXi) * edge % uSB(IRHOU , iXi)  &
                                                + edge % uSB(IRHOV , iXi) * edge % uSB(IRHOV , iXi) ) / edge % uSB(IRHO , iXi)
                        edge % viscousBCType(iXi) = DIRICHLET
                     end if
    
                  else
!
!                    Leaving flow
!                    ------------
                     if ( ML .gt. 1.0_RP ) then
!
!                       Supersonic
!                       ----------
                        edge % uSB(:,iXi) = edge % storage(1) % Q(:,iXi)
                        edge % viscousBCType(iXi) = NEUMANN

                     else
!
!                       Subsonic
!                       --------
                        edge % uSB(IRHO  , iXi)  = edge % storage(1) % Q(IRHO , iXi)
                        edge % uSB(IRHOU , iXi) = edge % storage(1) % Q(IRHOU , iXi)
                        edge % uSB(IRHOV , iXi) = edge % storage(1) % Q(IRHOV , iXi)
                        q = edge % uB(:,iXi)
                        edge % uSB(IRHOE,iXi) = cv * getPressure( q ) +  0.5_RP * ( edge % uSB(IRHOU,iXi) * uL + edge % uSB(IRHOV,iXi) * vL )
                        edge % viscousBCType(iXi) = DIRICHLET

                     end if
                  end if
#endif
               end do 

            type is (CurvedBdryEdge_t) 
               do ixi = 0 , N
!
!                 Get uB if comes from a Boundary State function
!                 ----------------------------------------------
                  if ( associated ( self % BoundaryState ) ) then
                     edge % uB(:,iXi) = self % BoundaryState( edge % x(1:NDIM , iXi) , time ) 
                  end if
#ifdef NAVIER_STOKES

!
!                 first stage: determine the boundary flow character
!                 --------------------------------------------------
                  rhoL = edge % storage(1) % Q(IRHO  , iXi)
                  uL   = edge % storage(1) %  Q(IRHOU , iXi) / rhoL
                  vL   = edge % storage(1) %  Q(IRHOV , iXi) / rhoL
                  vnL  = uL * edge % n (IX , iXi) + vL * edge % n(IY, iXi)
                  pL   = gm1 * ( edge % storage(1) % Q(IRHOE , iXi) - 0.5_RP * &
                        ( edge % storage(1) % Q(IRHOU , iXi) * uL + edge % storage(1) % Q(IRHOV , iXi) * vL ) )
                  aL   = sqrt( gamma * pL / rhoL ) 
                  ML   = sqrt(uL * uL + vL * vL) / aL
!
!                 second stage: compute the "right" state depending on the result
!                 ---------------------------------------------------------------
                  if ( vnL .le. 0.0_RP ) then
!
!                    Entering fluid
!                    --------------
                     if ( ML .gt. 1.0_RP ) then
!
!                       Supersonic
!                       ----------
                        edge % uSB(:,iXi) = edge % uB(:,iXi)
                        edge % viscousBCType(iXi) = DIRICHLET
      
                     else
!  
!                       Subsonic
!                       --------
                        pR = pL

                        edge % uSB(IRHO  , iXi ) = edge % uB(IRHO  , iXi )
                        edge % uSB(IRHOU , iXi ) = edge % uB(IRHOU , iXi )
                        edge % uSB(IRHOV , iXi ) = edge % uB(IRHOV , iXi)
                        edge % uSB(IRHOE , iXi ) =   cv * pR      & 
                                                + 0.5_RP * ( edge % uSB(IRHOU,iXi) * edge % uSB(IRHOU,iXi)  &
                                                + edge % uSB(IRHOV,iXi) * edge % uSB(IRHOV,iXi) ) / edge % uSB(IRHO,iXi)
                        edge % viscousBCType(iXi) = DIRICHLET

                     end if
    
                  else
!
!                    Leaving flow
!                    ------------
                     if ( ML .gt. 1.0_RP ) then
!
!                       Supersonic
!                       ----------
                        edge % uSB(:,iXi) = edge % storage(1) % Q(1:NCONS,iXi)
                        edge % viscousBCType(iXi) = NEUMANN

                     else
!
!                       Subsonic
!                       --------
                        edge % uSB(IRHO  , iXi)  = edge % storage(1) % Q(IRHO ,iXi)
                        edge % uSB(IRHOU , iXi)  = edge % storage(1) % Q(IRHOU,iXi)
                        edge % uSB(IRHOV , iXi)  = edge % storage(1) % Q(IRHOV,iXi)
                        q = edge % uB(:,iXi)
                        edge % uSB(IRHOE,iXi) = cv * getPressure( q ) +  0.5_RP * ( edge % uSB(IRHOU,iXi) * uL + edge % uSB(IRHOV,iXi) * vL )
                        edge % viscousBCType(iXi) = DIRICHLET

                     end if
                  end if

#endif
               end do 
            class default
         end select

         end associate

      end subroutine DirichletBC_UpdateSolution

