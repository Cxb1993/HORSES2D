!
!///////////////////////////////////////////////////////////////////////////////////
!
!           DIRICHLET BC
!           ------------
!///////////////////////////////////////////////////////////////////////////////////
!
      subroutine DirichletBC_Construct( self , marker , in_label)
         use Setup_class
         implicit none
         class(DirichletBC_t)       :: self
         integer                    :: marker
         character(len=*)           :: in_label
         real(kind=RP), allocatable :: pressure
         real(kind=RP), allocatable :: Temperature
         real(kind=RP), allocatable :: Mach
         real(kind=RP), allocatable :: AngleOfAttack
         real(kind=RP)              :: rho
         real(kind=RP)              :: V
         character(len=STR_LEN_BC)  :: source

         call readValueInRegion( trim(Setup % bdry_file) , "pressure" , pressure , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Temperature", Temperature , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Mach" , Mach , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Angle of attack" , AngleOfAttack , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Source" , source , in_label , "# end")
         
         if ( allocated(pressure) ) then
            pressure = pressure / refValues % p
         else
            allocate(pressure)
            pressure = Setup % pressure_ref / refValues % p
         end if

         if ( allocated(Temperature) ) then
            Temperature = Temperature / refValues % T
         else
            allocate(Temperature)
            Temperature = 1.0_RP
         end if

         if ( .not. allocated(Mach) ) then
            allocate(Mach)
            Mach = Dimensionless % Mach
         end if

         if ( allocated(AngleOfAttack) ) then
            AngleOfAttack = AngleOfAttack * PI / 180.0_RP
         else
            allocate(AngleOfAttack)
            AngleOfAttack = 0.0_RP
         end if

         if ( trim(source) .eq. "Initial condition" ) then
         
            call getInitialCondition( self % IC )

         end if

#ifdef _DIMENSIONLESS_TAU
         rho = pressure / Temperature
         V = sqrt(thermodynamics % gamma) * Mach
#else
         rho = dimensionless % gammaMach2 * pressure / Temperature
         V = Mach * sqrt( thermodynamics % Gamma * pressure / rho )
#endif
!
!        Construct the state vector
!        --------------------------
         associate ( gamma => Thermodynamics % Gamma , cv => Dimensionless % cv)
         self % p        = pressure
         self % q(IRHO ) = rho
         self % q(IRHOU) = rho * V * cos(AngleOfAttack)
         self % q(IRHOV) = rho * V * sin(AngleOfAttack)
         self % q(IRHOE) = cv * pressure + 0.5_RP * rho * V * V
         end associate

      end subroutine DirichletBC_Construct

      subroutine DirichletBC_Associate(self , edge)
         implicit none
         class(DirichletBC_t)          :: self
         class(Edge_t)                 :: edge
         integer                       :: i

         associate ( N => edge % spA % N )

         select type ( edge )
         
            type is (Edge_t)
               print*, "Only boundary edges are expected."
               stop "Stopped"
      
            type is (StraightBdryEdge_t)
               allocate ( edge % uB  ( 0:N , NCONS )  ) 
               
               edge % inviscidBCType = self % WeakType

               edge % RiemannSolver => self % RiemannSolver

               if ( associated ( self % IC ) ) then
                  do i = 0 , N
                     edge % uB(i , 1:NCONS) = self % IC( edge % x(IX:IY,i) ) 
                  end do

               else
                  do i = 0 , N
                     edge % uB(i , 1:NCONS) = self % q
                  end do

               end if

#ifdef NAVIER_STOKES
               allocate ( edge % uSB  ( 0:N , NCONS )  ) 
!               edge % uSB(0: , 1:) => edge % storage(1) % Q
#endif

            type is (CurvedBdryEdge_t)
               allocate ( edge % uB  ( 0:N , NCONS )  ) 

               edge % inviscidBCType = self % WeakType

               edge % RiemannSolver => self % RiemannSolver

               if ( associated ( self % IC ) ) then
                  do i = 0 , N
                     edge % uB(i , 1:NCONS) = self % IC( edge % x(IX:IY,i) ) 
                  end do

               else
                  do i = 0 , N
                     edge % uB(i , 1:NCONS) = self % q
                  end do

               end if



#ifdef NAVIER_STOKES
               allocate ( edge % uSB  ( 0:N , NCONS )  ) 
!               edge % uSB(0: , 1:) => edge % storage(1) % Q
#endif

         end select
         end associate

      end subroutine DirichletBC_Associate
#ifdef NAVIER_STOKES
      subroutine DirichletBC_UpdateSolution( self , edge )
         implicit none
         class(DirichletBC_t)          :: self
         class(Edge_t)                 :: edge
!
!        ---------------
!        Local variables
!        ---------------
!
         integer                  :: iXi
         integer                  :: N
         real(kind=RP)            :: rhoL , vnL , uL , vL , pL , ML , aL 
         real(kind=RP)            :: pR
         real(kind=RP)            :: q(NCONS)
!
         associate ( gamma => Thermodynamics % gamma , gm1 => Thermodynamics % gm1 , cp => Dimensionless % cp , cv => Dimensionless % cv)

         N = edge % spA % N

         select type ( edge )
            type is (StraightBdryEdge_t) 
               do ixi = 0 , N
!
!                 first stage: determine the boundary flow character
!                 --------------------------------------------------
                  rhoL = edge % storage(1) % q(iXi , IRHO)
                  uL  = edge % storage(1) % q(iXi , IRHOU) / rhoL
                  vL  = edge % storage(1) % q(iXi , IRHOV) / rhoL
                  vnL = uL * edge % n (IX , 0) + vL * edge % n(IY, 0)
                  pL  = gm1 * ( edge % storage(1) % Q(iXi , IRHOE) - 0.5_RP * &
                        ( edge % storage(1) % Q(iXi,IRHOU) * uL + edge % storage(1) % Q(iXi,IRHOV) * vL ) )
                  aL  = sqrt( gamma * pL / rhoL ) 
                  ML  = sqrt(uL * uL + vL * vL) / aL
!
!                 second stage: compute the "right" state depending on the result
!                 ---------------------------------------------------------------
                  if ( vnL .le. 0.0_RP ) then
!
!                    Entering fluid
!                    --------------
                     if ( ML .gt. 1.0_RP ) then
!
!                       Supersonic
!                       ----------
                        edge % uSB(iXi,:) = edge % uB(iXi,:)
                        edge % viscousBCType(iXi) = DIRICHLET
      
                     else
!  
!                       Subsonic
!                       --------
                        pR = pL

                        edge % uSB(iXi,IRHO ) = edge % uB(iXi,IRHO )
                        edge % uSB(iXi,IRHOU) = edge % uB(iXi,IRHOU)
                        edge % uSB(iXi,IRHOV) = edge % uB(iXi,IRHOV)
                        edge % uSB(iXi,IRHOE) =   cv * pR      & 
                                                + 0.5_RP * ( edge % uSB(iXi,IRHOU) * edge % uSB(iXi,IRHOU)  &
                                                + edge % uSB(iXi,IRHOV) * edge % uSB(iXi,IRHOV) ) / edge % uSB(iXi,IRHO)
                        edge % viscousBCType(iXi) = DIRICHLET
                     end if
    
                  else
!
!                    Leaving flow
!                    ------------
                     if ( ML .gt. 1.0_RP ) then
!
!                       Supersonic
!                       ----------
                        edge % uSB(iXi,:) = edge % storage(1) % Q(iXi, 1:NCONS)
                        edge % viscousBCType(iXi) = NEUMANN

                     else
!
!                       Subsonic
!                       --------
                        edge % uSB(iXi,IRHO)  = edge % storage(1) % Q(iXi,IRHO)
                        edge % uSB(iXi,IRHOU) = edge % storage(1) % Q(iXi,IRHOU)
                        edge % uSB(iXi,IRHOV) = edge % storage(1) % Q(iXi,IRHOV)
                        q = edge % uB(iXi,:)
                        edge % uSB(iXi,IRHOE) = cv * getPressure( q ) +  0.5_RP * ( edge % uSB(iXi,IRHOU) * uL + edge % uSB(iXi,IRHOV) * vL )
                        edge % viscousBCType(iXi) = DIRICHLET

                     end if
                  end if

               end do 

            type is (CurvedBdryEdge_t) 
               do ixi = 0 , N
!
!                 first stage: determine the boundary flow character
!                 --------------------------------------------------
                  rhoL = edge % storage(1) % q(iXi , IRHO)
                  uL  = edge % storage(1) % q(iXi , IRHOU) / rhoL
                  vL  = edge % storage(1) % q(iXi , IRHOV) / rhoL
                  vnL = uL * edge % n (IX , iXi) + vL * edge % n(IY, iXi)
                  pL  = gm1 * ( edge % storage(1) % Q(iXi , IRHOE) - 0.5_RP * &
                        ( edge % storage(1) % Q(iXi,IRHOU) * uL + edge % storage(1) % Q(iXi,IRHOV) * vL ) )
                  aL  = sqrt( gamma * pL / rhoL ) 
                  ML  = sqrt(uL * uL + vL * vL) / aL
!
!                 second stage: compute the "right" state depending on the result
!                 ---------------------------------------------------------------
                  if ( vnL .le. 0.0_RP ) then
!
!                    Entering fluid
!                    --------------
                     if ( ML .gt. 1.0_RP ) then
!
!                       Supersonic
!                       ----------
                        edge % uSB(iXi,:) = edge % uB(iXi,:)
                        edge % viscousBCType(iXi) = DIRICHLET
      
                     else
!  
!                       Subsonic
!                       --------
                        pR = pL

                        edge % uSB(iXi,IRHO ) = edge % uB(iXi,IRHO )
                        edge % uSB(iXi,IRHOU) = edge % uB(iXi,IRHOU)
                        edge % uSB(iXi,IRHOV) = edge % uB(iXi,IRHOV)
                        edge % uSB(iXi,IRHOE) =   cv * pR      & 
                                                + 0.5_RP * ( edge % uSB(iXi,IRHOU) * edge % uSB(iXi,IRHOU)  &
                                                + edge % uSB(iXi,IRHOV) * edge % uSB(iXi,IRHOV) ) / edge % uSB(iXi,IRHO)
                        edge % viscousBCType(iXi) = DIRICHLET

                     end if
    
                  else
!
!                    Leaving flow
!                    ------------
                     if ( ML .gt. 1.0_RP ) then
!
!                       Supersonic
!                       ----------
                        edge % uSB(iXi,:) = edge % storage(1) % Q(iXi, 1:NCONS)
                        edge % viscousBCType(iXi) = NEUMANN

                     else
!
!                       Subsonic
!                       --------
                        edge % uSB(iXi,IRHO)  = edge % storage(1) % Q(iXi,IRHO)
                        edge % uSB(iXi,IRHOU) = edge % storage(1) % Q(iXi,IRHOU)
                        edge % uSB(iXi,IRHOV) = edge % storage(1) % Q(iXi,IRHOV)
                        q = edge % uB(iXi,:)
                        edge % uSB(iXi,IRHOE) = cv * getPressure( q ) +  0.5_RP * ( edge % uSB(iXi,IRHOU) * uL + edge % uSB(iXi,IRHOV) * vL )
                        edge % viscousBCType(iXi) = DIRICHLET

                     end if
                  end if

               end do 

            class default
         end select

         end associate

      end subroutine DirichletBC_UpdateSolution
#endif

