!
!///////////////////////////////////////////////////////////////////////////////////////////////////////
!
!    HORSES2D - A high-order discontinuous Galerkin spectral element solver.
!    Copyright (C) 2017  Juan Manzanero Torrico (juan.manzanero@upm.es)
!
!    This program is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    This program is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with this program.  If not, see <http://www.gnu.org/licenses/>.
!
!////////////////////////////////////////////////////////////////////////////////////////////////////////
!
subroutine AssociateBoundaryConditionFunction(which , BCFCN )
   use Setup_Class
   implicit none
   character(len=*)                          :: which
   procedure(BoundaryStateFunction), pointer :: BCFCN => NULL()
   
   select case ( trim(which) )

      case ("Initial condition")
         if ( trim (Setup % IC) .eq. "Restart" ) then
            print*, "Initial condition boundary conditions are incompatible with restart mode."
            errorMessage(STD_OUT)
            stop "Stopped" 
         end if
         BCFCN => BC_InitialCondition

      case ("BC1")
         BCFCN => BC1_Driver

      case ("BC2")
         BCFCN => BC2_Driver

      case ("BC3")
         BCFCN => BC3_Driver

      case ("BC4")
         BCFCN => BC4_Driver

   end select

end subroutine AssociateBoundaryConditionFunction

function BC_InitialCondition(x,time) result(state)
   use Setup_class
   implicit none
   real(kind=RP),    intent(in)                 :: x(NDIM)
   real(kind=RP),    intent(in)                 :: time
   real(kind=RP)                                :: state(NCONS)

   state = getDimensionlessVariables( IC(x) )

end function BC_InitialCondition
   
function BC1_Driver(x,time) result(state)
   use Setup_class
   implicit none
   real(kind=RP),    intent(in)                 :: x(NDIM)
   real(kind=RP),    intent(in)                 :: time
   real(kind=RP)                                :: state(NCONS)
   interface
      function BoundaryConditionFunction1(x,time, Thermodynamics_ , Setup_ , refValues_ , dimensionless_ ) result (state)
         use SMConstants
         use Setup_class
         use Physics
         implicit none
         real(kind=RP),           intent(in)           :: x(NDIM)
         real(kind=RP),           intent(in)           :: time
         class(Thermodynamics_t), intent(in)           :: thermodynamics_
         class(Setup_t),          intent(in)           :: Setup_
         class(RefValues_t),      intent(in)           :: refValues_
         class(Dimensionless_t),  intent(in)           :: dimensionless_
         real(kind=RP)                                 :: state(NCONS)
      end function BoundaryConditionFunction1
   end interface
      
   state = getDimensionlessVariables( BoundaryConditionFunction1(x,time,Thermodynamics,Setup,refValues,dimensionless) )

end function BC1_Driver

function BC2_Driver(x,time) result(state)
   use Setup_class
   implicit none
   real(kind=RP),    intent(in)                 :: x(NDIM)
   real(kind=RP),    intent(in)                 :: time
   real(kind=RP)                                :: state(NCONS)
   interface
      function BoundaryConditionFunction2(x,time, Thermodynamics_ , Setup_ , refValues_ , dimensionless_ ) result (state)
         use SMConstants
         use Setup_class
         use Physics
         implicit none
         real(kind=RP),           intent(in)           :: x(NDIM)
         real(kind=RP),           intent(in)           :: time
         class(Thermodynamics_t), intent(in)           :: thermodynamics_
         class(Setup_t),          intent(in)           :: Setup_
         class(RefValues_t),      intent(in)           :: refValues_
         class(Dimensionless_t),  intent(in)           :: dimensionless_
         real(kind=RP)                                 :: state(NCONS)
      end function BoundaryConditionFunction2
   end interface
      
   state = getDimensionlessVariables ( BoundaryConditionFunction2(x,time,Thermodynamics,Setup,refValues,dimensionless) )

end function BC2_Driver

function BC3_Driver(x,time) result(state)
   use Setup_class
   implicit none
   real(kind=RP),    intent(in)                 :: x(NDIM)
   real(kind=RP),    intent(in)                 :: time
   real(kind=RP)                                :: state(NCONS)
   interface
      function BoundaryConditionFunction3(x,time, Thermodynamics_ , Setup_ , refValues_ , dimensionless_ ) result (state)
         use SMConstants
         use Setup_class
         use Physics
         implicit none
         real(kind=RP),           intent(in)           :: x(NDIM)
         real(kind=RP),           intent(in)           :: time
         class(Thermodynamics_t), intent(in)           :: thermodynamics_
         class(Setup_t),          intent(in)           :: Setup_
         class(RefValues_t),      intent(in)           :: refValues_
         class(Dimensionless_t),  intent(in)           :: dimensionless_
         real(kind=RP)                                 :: state(NCONS)
      end function BoundaryConditionFunction3
   end interface
      
   state = getDimensionlessVariables ( BoundaryConditionFunction3(x,time,Thermodynamics,Setup,refValues,dimensionless) )

end function BC3_Driver

function BC4_Driver(x,time) result(state)
   use Setup_class
   implicit none
   real(kind=RP),    intent(in)                 :: x(NDIM)
   real(kind=RP),    intent(in)                 :: time
   real(kind=RP)                                :: state(NCONS)
   interface
      function BoundaryConditionFunction4(x,time, Thermodynamics_ , Setup_ , refValues_ , dimensionless_ ) result (state)
         use SMConstants
         use Setup_class
         use Physics
         implicit none
         real(kind=RP),           intent(in)           :: x(NDIM)
         real(kind=RP),           intent(in)           :: time
         class(Thermodynamics_t), intent(in)           :: thermodynamics_
         class(Setup_t),          intent(in)           :: Setup_
         class(RefValues_t),      intent(in)           :: refValues_
         class(Dimensionless_t),  intent(in)           :: dimensionless_
         real(kind=RP)                                 :: state(NCONS)
      end function BoundaryConditionFunction4
   end interface
      
   state = getDimensionlessVariables ( BoundaryConditionFunction4(x,time,Thermodynamics,Setup,refValues,dimensionless) )

end function BC4_Driver
