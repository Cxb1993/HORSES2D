!
!///////////////////////////////////////////////////////////////////////////////////////////////////////
!
!    HORSES2D - A high-order discontinuous Galerkin spectral element solver.
!    Copyright (C) 2017  Juan Manzanero Torrico (juan.manzanero@upm.es)
!
!    This program is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    This program is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with this program.  If not, see <http://www.gnu.org/licenses/>.
!
!////////////////////////////////////////////////////////////////////////////////////////////////////////
!
!
!
!///////////////////////////////////////////////////////////////////////////////////
!
!           PERIODIC BC
!           -----------
!///////////////////////////////////////////////////////////////////////////////////
!
      subroutine PeriodicBC_Construct ( self , marker , in_label) 
         use Setup_class
         implicit none
         class(PeriodicBC_t)        :: self
         integer                   :: marker
         character(len=*)          :: in_label
         character(len=STR_LEN_BC)  :: direction
         integer, allocatable          :: connected_marker

         call readValueInRegion( trim(Setup % bdry_file) , "Direction" , direction , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Marker" , connected_marker , in_label , "# end")

         if ( allocated( connected_marker ) ) then
            self % connected_marker = connected_marker
         else
            print*, "You need to specify a marker to connect zone " , marker , " with."
            stop "Stopped."
         end if         

         if ( trim(direction) .eq. "x" ) then
            self % direction = IX
         elseif ( trim(direction) .eq. "y") then
            self % direction = IY
         else
            print*, "Direction in zone ", marker, " must be 'x' or 'y'."
            stop "Stopped."
         end if
         
         self % associated = .false.

      end subroutine PeriodicBC_Construct
