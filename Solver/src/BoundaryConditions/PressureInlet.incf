!
!///////////////////////////////////////////////////////////////////////////////////////////////////////
!
!    HORSES2D - A high-order discontinuous Galerkin spectral element solver.
!    Copyright (C) 2017  Juan Manzanero Torrico (juan.manzanero@upm.es)
!
!    This program is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    This program is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with this program.  If not, see <http://www.gnu.org/licenses/>.
!
!////////////////////////////////////////////////////////////////////////////////////////////////////////
!
!
!///////////////////////////////////////////////////////////////////////////////////
!
!           PRESSURE INLET BC
!           -----------------
!///////////////////////////////////////////////////////////////////////////////////
!
      subroutine PressureInletBC_Construct( self , marker , in_label)
         use Setup_class
         implicit none
         class(PressureInletBC_t)   :: self
         integer                    :: marker
         character(len=*)           :: in_label
         real(kind=RP), allocatable :: pressure
         real(kind=RP), allocatable :: Temperature
         real(kind=RP), allocatable :: Mach
         real(kind=RP), allocatable :: AngleOfAttack
         real(kind=RP)              :: rho
         real(kind=RP)              :: V
         character(len=STR_LEN_BC)  :: source

         call readValueInRegion( trim(Setup % bdry_file) , "pressure" , pressure , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Temperature", Temperature , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Mach" , Mach , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Angle of attack" , AngleOfAttack , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Use function" , source , in_label , "# end")
         
         if ( allocated(pressure) ) then
            pressure = pressure
         else
            allocate(pressure)
            pressure = Setup % pressure_ref 
         end if

         if ( allocated(Temperature) ) then
            Temperature = Temperature 
         else
            allocate(Temperature)
            Temperature = Setup % temperature_ref
         end if

         if ( .not. allocated(Mach) ) then
            allocate(Mach)
            Mach = Dimensionless % Mach
         end if

         if ( allocated(AngleOfAttack) ) then
            AngleOfAttack = AngleOfAttack * PI / 180.0_RP
         else
            allocate(AngleOfAttack)
            AngleOfAttack = 0.0_RP
         end if
!
!        Associate the Boundary State
!        ----------------------------
         call AssociateBoundaryConditionFunction ( trim(source) , self % BoundaryState )

         if ( .not. associated(self % BoundaryState) ) then
            V = Mach * sqrt( thermodynamics % Gamma * thermodynamics % R * Temperature )
            rho = pressure / ( thermodynamics % R * Temperature ) 
!   
!           Construct the state vector
!           --------------------------
            associate ( gamma => Thermodynamics % Gamma , cv => Dimensionless % cv)
            self % q(IRHO ) = rho
            self % q(IRHOU) = rho * V * cos(AngleOfAttack)
            self % q(IRHOV) = rho * V * sin(AngleOfAttack)
            self % q(IRHOE) = cv * pressure + 0.5_RP * rho * V * V
            end associate

            self % q = getDimensionlessVariables( self % q ) 

         end if

      end subroutine PressureInletBC_Construct

      subroutine PressureInletBC_Associate(self , edge)
         implicit none
         class(PressureInletBC_t)          :: self
         class(Edge_t)                 :: edge

         associate ( N=> edge % spA % N )
         select type ( edge )
            type is (StraightBdryEdge_t)
               allocate ( edge % FB ( 1:NCONS , 0:N ) )
               allocate ( edge % uB ( 1:NCONS , 0:N ) )

               edge % inviscidBCType = self % WeakType

               edge % RiemannSolver => self % RiemannSolver

#ifdef NAVIER_STOKES
               allocate( edge % uSB(1:NCONS,0:N) )
#endif

            type is (CurvedBdryEdge_t)
               allocate ( edge % FB ( 1:NCONS , 0:N ) )
               allocate ( edge % uB ( 1:NCONS , 0:N ) )

               edge % inviscidBCType = self % WeakType

               edge % RiemannSolver => self % RiemannSolver

#ifdef NAVIER_STOKES
               allocate( edge % uSB(1:NCONS,0:N) )
#endif

        end select
        end associate

      end subroutine PressureInletBC_Associate

      subroutine PressureInletBC_UpdateSolution( self , edge , time)
         implicit none
         class(PressureInletBC_t) :: self
         class(Edge_t)            :: edge
         real(kind=RP)            :: time
         integer                  :: iXi
         integer                  :: N
         real(kind=RP)            :: rhoL , vnL , uL , vL , pL , ML , aL 
         real(kind=RP)            :: rhoR , vnR , uR , vR , pR , aR 
         real(kind=RP)            :: uExt , vExt , pExt , MExtSq , atExtSq , sExt , ptExt
         real(kind=RP)            :: a , b , c
         real(kind=RP)            :: Rplus
         real(kind=RP)            :: q(NCONS) , F(NCONS,NDIM)
         real(kind=RP)            :: qext(NCONS)
!
         associate ( gamma => Thermodynamics % gamma , gm1 => Thermodynamics % gm1 , cp => Dimensionless % cp , cv => Dimensionless % cv)


         N = edge % spA % N

         select type ( edge )
            type is (StraightBdryEdge_t) 
               do ixi = 0 , N
!
!                 Set the external state
!                 ----------------------
                  if ( associated ( self % BoundaryState ) ) then
                     qext = self % BoundaryState( edge % x(1:NDIM , iXi) , time )
                  else
                     qext = self % q
                  end if
!
!                 Compute the boundary state quantities
!                 -------------------------------------
                  uExt = qext(IRHOU) / qext(IRHO)
                  vExt = qext(IRHOV) / qext(IRHO)
                  pExt = gm1 * (qext(IRHOE) - 0.5_RP * ( qext(IRHOU) * uExt + qext(IRHOV) * vExt ) ) 
                  MExtSq = ( uExt * uExt + vExt * vExt ) / ( gamma * pExt ) * qExt(IRHO) 
                  atExtSq = gamma * pExt / qExt(IRHO) * ( 1.0_RP + 0.5_RP * gm1 * MExtSq )
                  sExt = pExt / (qext(IRHO) ** gamma )
                  ptExt = pExt * ( 1.0_RP + 0.5_RP * gm1 * MExtSq ) ** ( cp )
!
!                 first stage: determine the boundary flow character
!                 --------------------------------------------------
                  rhoL = edge % storage(1) % q(IRHO,iXi)
                  uL  = edge % storage(1) % q(IRHOU,iXi) / rhoL
                  vL  = edge % storage(1) % q(IRHOV,iXi) / rhoL
                  vnL = uL * edge % n (IX , 0) + vL * edge % n(IY, 0)
                  pL  = gm1 * ( edge % storage(1) % Q(IRHOE,iXi) - 0.5_RP * &
                        ( edge % storage(1) % Q(IRHOU,iXi) * uL + edge % storage(1) % Q(IRHOV,iXi) * vL ) )
                  aL  = sqrt( gamma * pL / rhoL ) 
                  ML  = sqrt(uL * uL + vL * vL) / aL
                  Rplus = vnL + 2.0_RP * dimensionless % cv * aL
!
!                 second stage: compute the "right" state depending on the result
!                 ---------------------------------------------------------------
                  if ( vnL .le. 0.0_RP ) then
!
!                    Entering fluid
!                    --------------
                     if ( ML .gt. 1.0_RP ) then
!
!                       Supersonic
!                       ----------
                        q = qext
                        F = inviscidflux( q )
                        edge % FB(:,iXi) = ( F(1:NCONS,IX) * edge % n (IX,0) + F(1:NCONS,IY) * edge % n(IY,0) ) * edge % dS(0)
#ifdef NAVIER_STOKES
                        edge % uSB(:,iXi) = q
                        edge % viscousBCType(iXi) = DIRICHLET
#endif
      
                     else
!  
!                       Subsonic
!                       --------
                        a = (gamma+1.0_RP) / gm1
                        b = -2*Rplus
                        c = 0.5_RP * gm1 * ( Rplus * Rplus ) - atExtSq

                        aR = (-b + sqrt(b*b - 4.0_RP * a * c) ) / (2.0_RP * a)

                        rhoR = ( aR * aR / ( gamma * sExt ) ) ** (cv)
                        pR  = aR * aR * rhoR / gamma
                        vnR = Rplus - 2.0_RP * cv * aR
                        uR  = vnR * edge % n(IX,0) 
                        vR  = vnR * edge % n(IY,0) 

                        q(IRHO) = rhoR
                        q(IRHOU) = rhoR * uR
                        q(IRHOV) = rhoR * vR
                        q(IRHOE) = cv * pR + 0.5_RP * ( q(IRHOU) * uR + q(IRHOV) * vR ) 
   
                        F = InviscidFlux( q )
                        edge % FB(1:NCONS,iXi) = ( F(1:NCONS,IX) * edge % n (IX,0) + F(1:NCONS,IY) * edge % n(IY,0) ) * edge % dS(0)
#ifdef NAVIER_STOKES
                        edge % uSB(IRHO  , iXi) = rhoR
                        edge % uSB(IRHOU , iXi) = rhoR * uR
                        edge % uSB(IRHOV , iXi) = rhoR * vR
                        edge % uSB(IRHOE , iXi) = cv * pL + 0.5_RP * rhoR * ( uR * uR + vR * vR ) 
                        edge % viscousBCType(iXi) = DIRICHLET
#endif
   
                     end if
    
                  else
!
!                    Leaving flow
!                    ------------
                     if ( ML .gt. 1.0_RP ) then
!
!                       Supersonic
!                       ----------
                        q = edge % storage(1) % Q(:,iXi)
                        F = inviscidFlux(q)
                        edge % FB(1:NCONS , iXi) = ( F(1:NCONS,IX) * edge % n (IX,0) + F(1:NCONS,IY) * edge % n(IY,0) ) * edge % dS(0)
#ifdef NAVIER_STOKES
                        edge % uSB(:,iXi) = q
                        edge % viscousBCType(iXi) = NEUMANN
#endif

                     else
!
!                       Subsonic
!                       --------
                        q(IRHO) = edge % storage(1) % Q(IRHO,iXi)
                        q(IRHOU) = edge % storage(1) % Q(IRHOU,iXi)
                        q(IRHOV) = edge % storage(1) % Q(IRHOV,iXi)
                        q(IRHOE) = cv * (2.0_RP * ptExt - pL) +  0.5_RP * ( q(IRHOU) * uL + q(IRHOV) * vL )

                        F = inviscidFlux(q)
                        edge % FB(1:NCONS,iXi) = ( F(1:NCONS,IX) * edge % n (IX,0) + F(1:NCONS,IY) * edge % n(IY,0) ) * edge % dS(0)
#ifdef NAVIER_STOKES
                        edge % uSB(IRHO , iXi) = q(IRHO)
                        edge % uSB(IRHOU, iXi) = q(IRHOU)
                        edge % uSB(IRHOV, iXi) = q(IRHOV)
                        edge % uSB(IRHOE, iXi) = cv * ptExt + 0.5_RP * ( q(IRHOU) * uL + q(IRHOV) * vL ) 
                        edge % viscousBCType(iXi) = DIRICHLET
#endif
                     end if
                  end if

                  edge % uB(iXi,1:NCONS) = q
      
               end do 

            type is (CurvedBdryEdge_t) 
               do ixi = 0 , N
!
!                 Set the external state
!                 ----------------------
                  if ( associated ( self % BoundaryState ) ) then
                     qext = self % BoundaryState( edge % x(1:NDIM , iXi) , time )
                  else
                     qext = self % q
                  end if
!
!                 Compute the boundary state quantities
!                 -------------------------------------
                  uExt = qext(IRHOU) / qext(IRHO)
                  vExt = qext(IRHOV) / qext(IRHO)
                  pExt = gm1 * (qext(IRHOE) - 0.5_RP * ( qext(IRHOU) * uExt + qext(IRHOV) * vExt ) ) 
                  MExtSq = ( uExt * uExt + vExt * vExt ) / ( gamma * pExt ) * qExt(IRHO) 
                  atExtSq = gamma * pExt / qExt(IRHO) * ( 1.0_RP + 0.5_RP * gm1 * MExtSq )
                  sExt = pExt / (qext(IRHO) ** gamma )
                  ptExt = pExt * ( 1.0_RP + 0.5_RP * gm1 * MExtSq ) ** ( cp )
!
!                 first stage: determine the boundary flow character
!                 --------------------------------------------------
                  rhoL = edge % storage(1) % q(IRHO , iXi)
                  uL  = edge % storage(1) % q(IRHOU , iXi) / rhoL
                  vL  = edge % storage(1) % q(IRHOV , iXi) / rhoL
                  vnL = uL * edge % n (IX , iXi) + vL * edge % n(IY, iXi)
                  pL  = gm1 * ( edge % storage(1) % Q(IRHOE , iXi) - 0.5_RP * &
                        ( edge % storage(1) % Q(IRHOU,iXi) * uL + edge % storage(1) % Q(IRHOV,iXi) * vL ) )
                  aL  = sqrt( gamma * pL / rhoL ) 
                  ML  = sqrt(uL * uL + vL * vL) / aL
                  Rplus = vnL + 2.0_RP * dimensionless % cv * aL
!
!                 second stage: compute the "right" state depending on the result
!                 ---------------------------------------------------------------
                  if ( vnL .le. 0.0_RP ) then
!
!                    Entering fluid
!                    --------------
                     if ( ML .gt. 1.0_RP ) then
!
!                       Supersonic
!                       ----------
                        q = qExt
                        F = inviscidflux( q )
                        edge % FB(:,iXi) = ( F(1:NCONS,IX) * edge % n (IX,iXi) + F(1:NCONS,IY) * edge % n(IY,iXi) ) * edge % dS(iXi)
#ifdef NAVIER_STOKES
                        edge % uSB(:,iXi) = q
                        edge % viscousBCType(iXi) = DIRICHLET
#endif
      
                     else
!  
!                       Subsonic
!                       --------
                        a = (gamma+1.0_RP) / gm1
                        b = -2*Rplus
                        c = 0.5_RP * gm1 * ( Rplus * Rplus ) - atExtSq

                        aR = (-b + sqrt(b*b - 4.0_RP * a * c) ) / (2.0_RP * a)

                        rhoR = ( aR * aR / ( gamma * sExt ) ) ** (cv)
                        pR  = aR * aR * rhoR / gamma
                        vnR = Rplus - 2.0_RP * cv * aR
                        uR  = vnR * edge % n(IX,iXi) 
                        vR  = vnR * edge % n(IY,iXi) 

                        q(IRHO) = rhoR
                        q(IRHOU) = rhoR * uR
                        q(IRHOV) = rhoR * vR
                        q(IRHOE) = cv * pR + 0.5_RP * ( q(IRHOU) * uR + q(IRHOV) * vR ) 
   
                        F = InviscidFlux( q )
                        edge % FB(:,iXi) = ( F(1:NCONS,IX) * edge % n (IX,iXi) + F(1:NCONS,IY) * edge % n(IY,iXi) ) * edge % dS(iXi)
#ifdef NAVIER_STOKES
                        edge % uSB(IRHO  , iXi) = rhoR
                        edge % uSB(IRHOU , iXi) = rhoR * uR
                        edge % uSB(IRHOV , iXi) = rhoR * vR
                        edge % uSB(IRHOE , iXi) = cv * pL + 0.5_RP * rhoR * ( uR * uR + vR * vR ) 
                        edge % viscousBCType(iXi) = DIRICHLET
#endif
   
                     end if
    
                  else
!
!                    Leaving flow
!                    ------------
                     if ( ML .gt. 1.0_RP ) then
!
!                       Supersonic
!                       ----------
                        q = edge % storage(1) % Q(iXi, 1:NCONS)
                        F = inviscidFlux(q)
                        edge % FB(1:NCONS , iXi) = ( F(1:NCONS,IX) * edge % n (IX,iXi) + F(1:NCONS,IY) * edge % n(IY,iXi) ) * edge % dS(iXi)
#ifdef NAVIER_STOKES
                        edge % uSB(:,iXi) = q
                        edge % viscousBCType(iXi) = NEUMANN
#endif

                     else
!
!                       Subsonic
!                       --------
                        q(IRHO) = edge % storage(1) % Q(IRHO,iXi)
                        q(IRHOU) = edge % storage(1) % Q(IRHOU,iXi)
                        q(IRHOV) = edge % storage(1) % Q(IRHOV,iXi)
                        q(IRHOE) = cv * (2.0_RP * ptExt - pL) +  0.5_RP * ( q(IRHOU) * uL + q(IRHOV) * vL )

                        F = inviscidFlux(q)
                        edge % FB(:,iXi) = ( F(1:NCONS,IX) * edge % n (IX,iXi) + F(1:NCONS,IY) * edge % n(IY,iXi) ) * edge % dS(iXi)
#ifdef NAVIER_STOKES
                        edge % uSB(IRHO  , iXi) = q(IRHO)
                        edge % uSB(IRHOU , iXi) = q(IRHOU)
                        edge % uSB(IRHOV , iXi) = q(IRHOV)
                        edge % uSB(IRHOE , iXi) = cv * ptExt + 0.5_RP * ( q(IRHOU) * uL + q(IRHOV) * vL ) 
                        edge % viscousBCType(iXi) = DIRICHLET
#endif
                     end if
                  end if

                  edge % uB(:,iXi) = q
      
               end do 

            class default
         end select

         end associate

      end subroutine PressureInletBC_UpdateSolution
