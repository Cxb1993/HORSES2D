!
!///////////////////////////////////////////////////////////////////////////////////
!
!           PRESSURE OUTLET OUTFLOW BC
!           ----------
!///////////////////////////////////////////////////////////////////////////////////
!
      subroutine PressureOutletBC_Construct( self , marker , in_label)
         use Setup_class
         implicit none
         class(PressureOutletBC_t)  :: self
         integer                    :: marker
         character(len=*)           :: in_label
         character(len=STR_LEN_BC)  :: outflowType
         real(kind=RP), allocatable :: pressure
         real(kind=RP), allocatable :: Temperature
         real(kind=RP), allocatable :: Mach
         real(kind=RP), allocatable :: AngleOfAttack
         real(kind=RP)              :: rho
         real(kind=RP)              :: V

         call readValueInRegion( trim(Setup % bdry_file) , "pressure" , pressure , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Temperature", Temperature , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Mach" , Mach , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Angle of attack" , AngleOfAttack , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Outflow type" , outflowType , in_label , "# end")
         
         if ( allocated(pressure) ) then
            pressure = pressure / refValues % p
         else
            allocate(pressure)
            pressure = Setup % pressure_ref / refValues % p
         end if

         if ( allocated(Temperature) ) then
            Temperature = Temperature / refValues % T
         else
            allocate(Temperature)
            Temperature = 1.0_RP
         end if

         if ( .not. allocated(Mach) ) then
            allocate(Mach)
            Mach = Dimensionless % Mach
         end if

         if ( allocated(AngleOfAttack) ) then
            AngleOfAttack = AngleOfAttack * PI / 180.0_RP
         else
            allocate(AngleOfAttack)
            AngleOfAttack = 0.0_RP
         end if
   
         if ( trim(outflowType) .eq. "Reflective" ) then
            self % outflowType = REFLECTIVE_OUTFLOW

         elseif ( trim(outflowType) .eq. "Partially non reflective" ) then
            self % outflowType = PARTIALLY_NON_REFLECTIVE_OUTFLOW

         else        ! Default: Partially non reflective
            self % outflowType = PARTIALLY_NON_REFLECTIVE_OUTFLOW

         end if
!
!        Construct the state vector
!        --------------------------
#ifdef _DIMENSIONLESS_TAU
         rho = pressure / Temperature
         V = sqrt(thermodynamics % gamma) * Mach
#else
         rho = dimensionless % gammaMach2 * pressure / Temperature
         V = Mach * sqrt(thermodynamics % gamma * pressure / Temperature )
#endif


         associate ( gamma => Thermodynamics % Gamma , cv => Dimensionless % cv , gm1 => Thermodynamics % gm1 , gogm1 => Thermodynamics % gogm1 )
         self % q(IRHO) = rho
         self % q(IRHOU) = rho * V * cos(AngleOfAttack)
         self % q(IRHOV) = rho * V * sin(AngleOfAttack)
         self % q(IRHOE) = cv * pressure + 0.5_RP * rho * V * V
         self % AngleOfAttack = AngleOfAttack
         self % Tt            = Temperature * ( 1.0_RP + 0.5_RP * gm1 * Mach * Mach)
         self % pt            = pressure * ( self % Tt / Temperature ) ** gogm1 
         end associate

      end subroutine PressureOutletBC_Construct

      subroutine PressureOutletBC_Associate(self , edge)
         implicit none
         class(PressureOutletBC_t)          :: self
         class(Edge_t)                 :: edge

         associate ( N => edge % spA % N )

         select type ( edge )
         
            type is (Edge_t)
               print*, "Only boundary edges are expected."
               stop "Stopped"
      
            type is (StraightBdryEdge_t)
               allocate( edge % uB(0:N,NCONS) )
               
               edge % inviscidBCType = self % WeakType

               edge % RiemannSolver => self % RiemannSolver
         
#ifdef NAVIER_STOKES
               allocate( edge % uSB(0:N,NCONS) )
!               edge % uSB(0: , 1:) => edge % storage(1) % Q
#endif
   
            type is (CurvedBdryEdge_t)
               allocate( edge % uB(0:N,NCONS) )

               edge % inviscidBCType = self % WeakType

               edge % RiemannSolver => self % RiemannSolver

#ifdef NAVIER_STOKES
               allocate( edge % uSB(0:N,NCONS) ) 
!               edge % uSB(0: , 1:) => edge % storage(1) % Q
#endif

         end select

         end associate
      end subroutine PressureOutletBC_Associate

      subroutine PressureOutletBC_UpdateSolution( self , edge )
         implicit none
         class(PressureOutletBC_t)          :: self
         class(Edge_t)                       :: edge
         integer                       :: iXi
         integer                    :: N 
         real(kind=RP)              :: rhoL , vnL , uL , vL , pL , ML , aL 
         real(kind=RP)              :: rhoR , uR , vR , pR , aR , vnR
         real(kind=RP)              :: rhoInfty, uInfty, vInfty , pInfty
         real(kind=RP)              :: nInfty(NDIM)
         real(kind=RP)              :: Rplus , R0
!
!        *********************************************************************
!           This routine computes the "Right" state of a Outflow boundary
!          condition. Once this is done, the Riemann flux is computed
!          from the computed state, and the real boundary state. This
!          ficticial state is computed by means of the characteristics method
!          which yields in four cases:
!              * Supersonic inflow (Four entering characteristics)
!              * Subsonic inflow (Three entering characteristics)
!              * Subsonic outflow (One entering characteristics)
!              * Supersonic outflow (All characteristics leave the domain)
!        *********************************************************************
!
         associate ( gamma => Thermodynamics % gamma , gm1 => Thermodynamics % gm1 , cp => Dimensionless % cp , cv => Dimensionless % cv)

         rhoInfty = self % q(IRHO)
         uInfty   = self % q(IRHOU) / rhoInfty
         vInfty   = self % q(IRHOV) / rhoInfty
         pInfty   = gm1 * ( self % q(IRHOE) - 0.5_RP * self % q(IRHOU) * uInfty - 0.5_RP * self % q(IRHOV) * vInfty )
         nInfty   = [cos(self % AngleOfAttack) , sin(self % AngleOfAttack)]
         

         N = edge % spA % N

         select type ( edge )
            type is (StraightBdryEdge_t) 
               do iXi = 0 , N
!
!                 First stage: Determine the boundary flow character
!                 --------------------------------------------------
                  rhoL = edge % storage(1) % Q(iXi , IRHO)
                  uL   = edge % storage(1) % Q(iXi , IRHOU) / rhoL
                  vL   = edge % storage(1) % Q(iXi , IRHOV) / rhoL
                  vnL  = uL * edge % n (IX , 0) + vL * edge % n(IY, 0)
                  pL   = gm1 * ( edge % storage(1) % Q(iXi , IRHOE) - 0.5_RP * edge % storage(1) % Q(iXi,IRHOU) * uL - 0.5_RP * edge % storage(1) % Q(iXi,IRHOV) * vL )
                  aL   = sqrt( gamma * pL / rhoL ) 
                  ML   = sqrt(uL * uL + vL * vL ) / aL
!
!                 Second stage: Compute the "Right" state depending on the result
!                 ---------------------------------------------------------------
                  if ( vnL .lt. 0.0_RP ) then
!
!                    Entering flow
!                    -------------
                     if ( ML .gt. 1.0_RP ) then
!
!                       Supersonic
!                       ----------
                        edge % uB(iXi , 1:NCONS)  = self % q
#ifdef NAVIER_STOKES
                        edge % uSB(iXi, 1:NCONS)  = self % q
                        edge % viscousBCType(iXi) = DIRICHLET
#endif

                     else
!
!                       Subsonic
!                       ----------
                        if ( self % outflowType .eq. REFLECTIVE_OUTFLOW ) then
                           R0 = pL - aL * aL * rhoL
                           Rplus = vnL + 2.0_RP * dimensionless % cv * aL
                           rhoR = -(R0 - pInfty) / (aL*aL)
                           aR  = sqrt(gamma * pInfty / rhoR )
                           vnR = Rplus - 2.0_RP * aR * dimensionless % cv
                           uR = uL + (vnR - vnL) * edge % n(IX,0)
                           vR = vL + (vnR - vnL) * edge % n(IY,0)
                           pR = pInfty
                        
                        elseif ( self % outflowType .eq. PARTIALLY_NON_REFLECTIVE_OUTFLOW ) then
                           pR = 2.0_RP * pInfty - pL
                           uR = abs(vnL) * nInfty(IX)
                           vR = abs(vnL) * nInfty(IY)
                           rhoR = rhoL 
   
                        end if
   
                        edge % uB(iXi , IRHO) = rhoR
                        edge % uB(iXi , IRHOU) = rhoR * uR
                        edge % uB(iXi , IRHOV) = rhoR * vR
                        edge % uB(iXi , IRHOE) = cv * pR + 0.5_RP * (edge % uB(iXi,IRHOU) * uR + edge % uB(iXi,IRHOV) * vR )
#ifdef NAVIER_STOKES
                        edge % uSB(iXi, : ) = edge % uB(iXi , :)
                        edge % viscousBCType(iXi) = DIRICHLET
#endif

                     end if

                  else
!
!                    Leaving flow
!                    ------------
                     if ( ML .gt. 1.0_RP ) then
!
!                       Supersonic
!                       ----------
                        edge % uB(iXi , 1:NCONS) = edge % storage(1) % Q(iXi,1:NCONS)
#ifdef NAVIER_STOKES
                        edge % uSB(iXi , 1:NCONS) = edge % uB(iXi, 1:NCONS)
                        edge % viscousBCType(iXi) = NEUMANN
#endif

                     else
!
!                       Subsonic
!                       --------
                        if ( self % outflowType .eq. REFLECTIVE_OUTFLOW ) then
                           R0 = pL - aL * aL * rhoL
                           Rplus = vnL + 2.0_RP * dimensionless % cv * aL
                           rhoR = -(R0 - pInfty) / (aL*aL)
                           aR  = sqrt(gamma * pInfty / rhoR )
                           vnR = Rplus - 2.0_RP * aR * dimensionless % cv
                           uR = uL + (vnR - vnL) * edge % n(IX,0)
                           vR = vL + (vnR - vnL) * edge % n(IY,0)
                           pR = pInfty
   
                         elseif ( self % outflowType .eq. PARTIALLY_NON_REFLECTIVE_OUTFLOW ) then
                           pR = 2.0_RP * pInfty - pL
                           uR = uL
                           vR = vL
                           rhoR = rhoL
   
                         end if
   
                         edge % uB(iXi , IRHO) = rhoR
                         edge % uB(iXi , IRHOU) = rhoR * uR
                         edge % uB(iXi , IRHOV) = rhoR * vR
                         edge % uB(iXi , IRHOE) = cv * pR + 0.5_RP * (edge % uB(iXi,IRHOU) * uR + edge % uB(iXi,IRHOV) * vR )
#ifdef NAVIER_STOKES
                         edge % uSB(iXi , IRHO) = rhoL
                         edge % uSB(iXi , IRHOU) = rhoL * uL
                         edge % uSB(iXi , IRHOV) = rhoL * vL
                         edge % uSB(iXi , IRHOE) = cv * pR + 0.5_RP * rhoL * (uL * uL + vL * vL)
                        edge % viscousBCType(iXi) = DIRICHLET
#endif

                      end if 
   
                  end if
   
               end do 

            type is (CurvedBdryEdge_t) 
               do iXi = 0 , N
!
!                 First stage: Determine the boundary flow character
!                 --------------------------------------------------
                  rhoL = edge % storage(1) % Q(iXi , IRHO)
                  uL   = edge % storage(1) % Q(iXi , IRHOU) / rhoL
                  vL   = edge % storage(1) % Q(iXi , IRHOV) / rhoL
                  vnL  = uL * edge % n (IX , iXi) + vL * edge % n(IY, iXi)
                  pL   = gm1 * ( edge % storage(1) % Q(iXi , IRHOE) - 0.5_RP * edge % storage(1) % Q(iXi,IRHOU) * uL - 0.5_RP * edge % storage(1) % Q(iXi,IRHOV) * vL )
                  aL   = sqrt( gamma * pL / rhoL ) 
                  ML   = sqrt(uL * uL + vL * vL ) / aL
!
!                 Second stage: Compute the "Right" state depending on the result
!                 ---------------------------------------------------------------
                  if ( vnL .lt. 0.0_RP ) then
!
!                    Entering flow
!                    -------------
                     if ( ML .gt. 1.0_RP ) then
!
!                       Supersonic
!                       ----------
                        edge % uB(iXi , 1:NCONS)  = self % q

#ifdef NAVIER_STOKES
                        edge % uSB(iXi, 1:NCONS)  = self % q
                        edge % viscousBCType(iXi) = DIRICHLET
#endif

                     else
!
!                       Subsonic
!                       ----------
                        if ( self % outflowType .eq. REFLECTIVE_OUTFLOW ) then
                           R0 = pL - aL * aL * rhoL
                           Rplus = vnL + 2.0_RP * dimensionless % cv * aL
                           rhoR = -(R0 - pInfty) / (aL*aL)
                           aR  = sqrt(gamma * pInfty / rhoR )
                           vnR = Rplus - 2.0_RP * aR * dimensionless % cv
                           uR = uL + (vnR - vnL) * edge % n(IX,iXi)
                           vR = vL + (vnR - vnL) * edge % n(IY,iXi)
                           pR = pInfty
                        
                        elseif ( self % outflowType .eq. PARTIALLY_NON_REFLECTIVE_OUTFLOW ) then
                           pR = 2.0_RP * pInfty - pL
                           uR = abs(vnL) * nInfty(IX)
                           vR = abs(vnL) * nInfty(IY)
                           rhoR = rhoL 
   
                        end if
   
                        edge % uB(iXi , IRHO) = rhoR
                        edge % uB(iXi , IRHOU) = rhoR * uR
                        edge % uB(iXi , IRHOV) = rhoR * vR
                        edge % uB(iXi , IRHOE) = cv * pR + 0.5_RP * (edge % uB(iXi,IRHOU) * uR + edge % uB(iXi,IRHOV) * vR )

#ifdef NAVIER_STOKES
                        edge % uSB(iXi, : ) = edge % uB(iXi , :)
                        edge % viscousBCType(iXi) = DIRICHLET
#endif

                     end if

                  else
!
!                    Leaving flow
!                    ------------
                     if ( ML .gt. 1.0_RP ) then
!
!                       Supersonic
!                       ----------
                        edge % uB(iXi , 1:NCONS) = edge % storage(1) % Q(iXi,1:NCONS)

#ifdef NAVIER_STOKES
                        edge % uSB(iXi , 1:NCONS) = edge % uB(iXi, 1:NCONS)
                        edge % viscousBCType(iXi) = NEUMANN
#endif

                     else
!
!                       Subsonic
!                       --------
                        if ( self % outflowType .eq. REFLECTIVE_OUTFLOW ) then
                           R0 = pL - aL * aL * rhoL
                           Rplus = vnL + 2.0_RP * dimensionless % cv * aL
                           rhoR = -(R0 - pInfty) / (aL*aL)
                           aR  = sqrt(gamma * pInfty / rhoR )
                           vnR = Rplus - 2.0_RP * aR * dimensionless % cv
                           uR = uL + (vnR - vnL) * edge % n(IX,iXi)
                           vR = vL + (vnR - vnL) * edge % n(IY,iXi)
                           pR = pInfty
   
                         elseif ( self % outflowType .eq. PARTIALLY_NON_REFLECTIVE_OUTFLOW ) then
                           pR = 2.0_RP * pInfty - pL
                           uR = uL
                           vR = vL
                           rhoR = rhoL
   
                         end if
   
                         edge % uB(iXi , IRHO) = rhoR
                         edge % uB(iXi , IRHOU) = rhoR * uR
                         edge % uB(iXi , IRHOV) = rhoR * vR
                         edge % uB(iXi , IRHOE) = cv * pR + 0.5_RP * (edge % uB(iXi,IRHOU) * uR + edge % uB(iXi,IRHOV) * vR )

#ifdef NAVIER_STOKES
                         edge % uSB(iXi , IRHO) = rhoL
                         edge % uSB(iXi , IRHOU) = rhoL * uL
                         edge % uSB(iXi , IRHOV) = rhoL * vL
                         edge % uSB(iXi , IRHOE) = cv * pR + 0.5_RP * rhoL * (uL * uL + vL * vL)
                         edge % viscousBCType(iXi) = DIRICHLET
#endif

                      end if 
                  end if
               end do 
            class default
         end select

         end associate

      end subroutine PressureOutletBC_UpdateSolution
