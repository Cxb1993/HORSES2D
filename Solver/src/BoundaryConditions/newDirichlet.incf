!
!///////////////////////////////////////////////////////////////////////////////////////////////////////
!
!    HORSES2D - A high-order discontinuous Galerkin spectral element solver.
!    Copyright (C) 2017  Juan Manzanero Torrico (juan.manzanero@upm.es)
!
!    This program is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    This program is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with this program.  If not, see <http://www.gnu.org/licenses/>.
!
!////////////////////////////////////////////////////////////////////////////////////////////////////////
!
!
!///////////////////////////////////////////////////////////////////////////////////
!
!           PRESSURE INLET BC
!           -----------------
!///////////////////////////////////////////////////////////////////////////////////
!
      subroutine newDirichletBC_Construct( self , marker , in_label)
         use Setup_class
         implicit none
         class(newDirichletBC_t)    :: self
         integer                    :: marker
         character(len=*)           :: in_label
         real(kind=RP), allocatable :: pressure
         real(kind=RP), allocatable :: Temperature
         real(kind=RP), allocatable :: Mach
         real(kind=RP), allocatable :: AngleOfAttack
         real(kind=RP)              :: rho
         real(kind=RP)              :: V
         character(len=STR_LEN_BC)  :: outflowPressure
         character(len=STR_LEN_BC)  :: mode
         character(len=STR_LEN_BC)  :: source

         call readValueInRegion( trim(Setup % bdry_file) , "pressure" , pressure , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Temperature", Temperature , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Mach" , Mach , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Angle of attack" , AngleOfAttack , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Outflow pressure", outflowPressure , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Mode" , mode , in_label , "# end" )
         call readValueInRegion( trim(Setup % bdry_file) , "Use function" , source , in_label , "# end" )
         
         if ( allocated(pressure) ) then
            pressure = pressure 
         else
            allocate(pressure)
            pressure = Setup % pressure_ref
         end if

         if ( allocated(Temperature) ) then
            Temperature = Temperature
         else
            allocate(Temperature)
            Temperature = Setup % temperature_ref
         end if

         if ( .not. allocated(Mach) ) then
            allocate(Mach)
            Mach = Dimensionless % Mach
         end if

         if ( allocated(AngleOfAttack) ) then
            AngleOfAttack = AngleOfAttack * PI / 180.0_RP
         else
            allocate(AngleOfAttack)
            AngleOfAttack = 0.0_RP
         end if

         if ( trim(mode) .eq. "Specify speed" ) then
            self % mode = SPECIFY_SPEED

         elseif ( trim(mode) .eq. "Specify total pressure" ) then
            self % mode = SPECIFY_TOTAL_PRESSURE

         else
!
!           Default: Speed
!           --------------
            self % mode = SPECIFY_SPEED
         
         end if

         if ( trim(outflowPressure) .eq. "Static" ) then
            self % outflowPressure = STATIC_PRESSURE

         elseif ( trim(outflowPressure) .eq. "Total" ) then
            self % outflowPressure = TOTAL_PRESSURE

         else
!
!           Default: Static pressure
!           ------------------------
            self % outflowPressure = STATIC_PRESSURE

         end if
!
!        Associate the Boundary State
!        ----------------------------
         call AssociateBoundaryConditionFunction ( trim(source) , self % BoundaryState )

         if ( .not. associated(self % BoundaryState) ) then
            V = Mach * sqrt( thermodynamics % Gamma * thermodynamics % R * Temperature )
            rho = pressure / ( thermodynamics % R * Temperature ) 
!   
!           Construct the state vector
!           --------------------------
            associate ( gamma => Thermodynamics % Gamma , cv => Dimensionless % cv)
            self % q(IRHO ) = rho
            self % q(IRHOU) = rho * V * cos(AngleOfAttack)
            self % q(IRHOV) = rho * V * sin(AngleOfAttack)
            self % q(IRHOE) = cv * pressure + 0.5_RP * rho * V * V
            end associate

            self % q = getDimensionlessVariables( self % q ) 

         end if

      end subroutine newDirichletBC_Construct

      subroutine newDirichletBC_Associate(self , edge)
         implicit none
         class(newDirichletBC_t)          :: self
         class(Edge_t)                 :: edge

         associate ( N=> edge % spA % N )
         select type ( edge )
            type is (StraightBdryEdge_t)
               allocate ( edge % FB ( 0:N , 1:NCONS ) )
               allocate ( edge % uB ( 0:N , 1:NCONS ) )

               edge % inviscidBCType = self % WeakType

               edge % RiemannSolver => self % RiemannSolver


            type is (CurvedBdryEdge_t)
               allocate ( edge % FB ( 0:N , 1:NCONS ) )
               allocate ( edge % uB ( 0:N , 1:NCONS ) )

               edge % inviscidBCType = self % WeakType

               edge % RiemannSolver => self % RiemannSolver

        end select
        end associate

      end subroutine newDirichletBC_Associate

      subroutine newDirichletBC_UpdateSolution( self , edge , time)
         implicit none
         class(newDirichletBC_t) :: self
         class(Edge_t)            :: edge
         real(kind=RP)            :: time
         integer                  :: iXi
         integer                  :: N
         real(kind=RP)            :: rhoL , vnL , uL , vL , pL , ML , aL 
         real(kind=RP)            :: rhoR , pR , aR , MR
         real(kind=RP)            :: Rplus
         real(kind=RP)            :: uExt , vExt , pExt , MExtSq , ptExt , sExt , nInfty(NDIM)
         real(kind=RP)            :: q(NCONS)
!
!        *********************************************************************
!           This routine computes the "Right" state of a InflowOutflow boundary
!          condition. Once this is done, the Riemann flux is computed
!          from the computed state, and the real boundary state. This
!          ficticial state is computed by means of the characteristics method
!          which yields in four cases:
!              * Supersonic inflow (Four entering characteristics)
!              * Subsonic inflow (Three entering characteristics)
!              * Subsonic outflow (One entering characteristics)
!              * Supersonic outflow (All characteristics leave the domain)
!        *********************************************************************
!
         associate ( gamma => Thermodynamics % gamma , gm1 => Thermodynamics % gm1 , cp => Dimensionless % cp , cv => Dimensionless % cv)


         N = edge % spA % N

         select type ( edge )
            type is (StraightBdryEdge_t) 
               do ixi = 0 , N
!
!                 Set the external state
!                 ----------------------
                  if ( associated ( self % BoundaryState ) ) then
                     q = self % BoundaryState( edge % x(1:NDIM , iXi) , time )
                  else
                     q = self % q
                  end if
!
!                 Compute the external variables
!                 ------------------------------
                  uExt = q(IRHOU) / q(IRHO)
                  vExt = q(IRHOV) / q(IRHO)
                  nInfty = [uExt,vExt] / norm2([uExt,vExt])
                  pExt = gm1 * (q(IRHOE) - 0.5_RP * ( q(IRHOU) * uExt + q(IRHOV) * vExt ) ) 
                  MExtSq = ( uExt * uExt + vExt * vExt ) / ( gamma * pExt ) * q(IRHO) 
                  sExt = pExt / (q(IRHO) ** gamma )
                  ptExt = pExt * ( 1.0_RP + 0.5_RP * gm1 * MExtSq ) ** ( cp )
!
!                 first stage: determine the boundary flow character
!                 --------------------------------------------------
                  rhoL = edge % storage(1) % q(iXi , IRHO)
                  uL  = edge % storage(1) % q(iXi , IRHOU) / rhoL
                  vL  = edge % storage(1) % q(iXi , IRHOV) / rhoL
                  vnL = uL * edge % n (IX , 0) + vL * edge % n(IY, 0)
                  pL  = gm1 * ( edge % storage(1) % Q(iXi , IRHOE) - 0.5_RP * &
                        ( edge % storage(1) % Q(iXi,IRHOU) * uL + edge % storage(1) % Q(iXi,IRHOV) * vL ) )
                  aL  = sqrt( gamma * pL / rhoL ) 
                  ML  = sqrt(uL * uL + vL * vL) / aL
                  Rplus = vnL + 2.0_RP * dimensionless % cv * aL
!
!                 second stage: compute the "right" state depending on the result
!                 ---------------------------------------------------------------
                  if ( vnL .le. 0.0_RP ) then
!
!                    Entering fluid
!                    --------------
                     if ( ML .gt. 1.0_RP ) then
!
!                       Supersonic
!                       ----------
                        edge % uB(iXi,:) = q
#ifdef NAVIER_STOKES
                        edge % viscousBCType(iXi) = DIRICHLET
#endif
      
                     else
!  
!                       Subsonic
!                       --------
                        pR = pL
                        rhoR = ( pR / sExt ) ** (1.0_RP / gamma)
                        aR = sqrt(gamma * pR / rhoR)

                        if ( self % mode .eq. SPECIFY_SPEED ) then
                           edge % uB(iXi,IRHO) = q(IRHO)
                           edge % uB(iXi,IRHOU) = q(IRHOU)
                           edge % uB(iXi,IRHOV) = q(IRHOV)
                           edge % uB(iXi,IRHOE) = cv * pR + 0.5_RP * ( edge % uB(iXi,IRHOU) * edge % uB(iXi,IRHOU) + edge % uB(iXi,IRHOV) * edge % uB(iXi,IRHOV) ) / edge % uB(iXi,IRHO)

                        elseif ( self % mode .eq. SPECIFY_TOTAL_PRESSURE ) then
                           if ( pR .ge. ptExt ) then
                              MR = -sqrt(2.0_RP / gm1 * ( ( pR / ptExt) ** (gm1 / gamma) - 1.0_RP ) )
                           else
                              MR = sqrt(2.0_RP / gm1 * ( (ptExt/pR) ** (gm1/gamma) - 1.0_RP ) )
                           end if
      
                           edge % uB(iXi,IRHO) = rhoR
                           edge % uB(iXi,IRHOU) = rhoR * aR * MR * nInfty(IX)
                           edge % uB(iXi,IRHOV) = rhoR * aR * MR * nInfty(IY)
                           edge % uB(iXi,IRHOE) = cv * pR + 0.5_RP * rhoR * aR * aR * MR * MR

                        end if
#ifdef NAVIER_STOKES
                        edge % viscousBCType(iXi) = DIRICHLET
#endif
   
                     end if
    
                  else
!
!                    Leaving flow
!                    ------------
                     if ( ML .gt. 1.0_RP ) then
!
!                       Supersonic
!                       ----------
                        edge % uB(iXi,:) = edge % storage(1) % Q(iXi, 1:NCONS)
#ifdef NAVIER_STOKES
                        edge % viscousBCType(iXi) = NEUMANN
#endif

                     else
!
!                       Subsonic
!                       --------
                        edge % uB(iXi,IRHO)  = edge % storage(1) % Q(iXi,IRHO)
                        edge % uB(iXi,IRHOU) = edge % storage(1) % Q(iXi,IRHOU)
                        edge % uB(iXi,IRHOV) = edge % storage(1) % Q(iXi,IRHOV)
      
                        if ( self % outflowPressure .eq. STATIC_PRESSURE ) then
                           edge % uB(iXi,IRHOE) = cv * (2.0_RP * pExt - pL) +  0.5_RP * ( edge % uB(iXi,IRHOU) * uL + edge % uB(iXi,IRHOV) * vL )

                        elseif ( self % outflowPressure .eq. TOTAL_PRESSURE ) then
                           edge % uB(iXi,IRHOE) = cv * (2.0_RP * ptExt - pL) +  0.5_RP * ( edge % uB(iXi,IRHOU) * uL + edge % uB(iXi,IRHOV) * vL )

                        end if
#ifdef NAVIER_STOKES
                        edge % viscousBCType(iXi) = DIRICHLET
#endif

                     end if
                  end if

               end do 

#ifdef NAVIER_STOKES
               edge % uSB(0:,1:) => edge % uB(0:,1:)
#endif

            type is (CurvedBdryEdge_t) 
               do ixi = 0 , N
!
!                 Set the external state
!                 ----------------------
                  if ( associated ( self % BoundaryState ) ) then
                     q = self % BoundaryState( edge % x(1:NDIM , iXi) , time )
                  else
                     q = self % q
                  end if
!
!                 Compute the external variables
!                 ------------------------------
                  uExt = q(IRHOU) / q(IRHO)
                  vExt = q(IRHOV) / q(IRHO)
                  nInfty = [uExt,vExt] / norm2([uExt,vExt])
                  pExt = gm1 * (q(IRHOE) - 0.5_RP * ( q(IRHOU) * uExt + q(IRHOV) * vExt ) ) 
                  MExtSq = ( uExt * uExt + vExt * vExt ) / ( gamma * pExt ) * q(IRHO) 
                  sExt = pExt / (q(IRHO) ** gamma )
                  ptExt = pExt * ( 1.0_RP + 0.5_RP * gm1 * MExtSq ) ** ( cp )
!
!                 first stage: determine the boundary flow character
!                 --------------------------------------------------
                  rhoL = edge % storage(1) % q(iXi , IRHO)
                  uL  = edge % storage(1) % q(iXi , IRHOU) / rhoL
                  vL  = edge % storage(1) % q(iXi , IRHOV) / rhoL
                  vnL = uL * edge % n (IX , iXi) + vL * edge % n(IY, iXi)
                  pL  = gm1 * ( edge % storage(1) % Q(iXi , IRHOE) - 0.5_RP * &
                        ( edge % storage(1) % Q(iXi,IRHOU) * uL + edge % storage(1) % Q(iXi,IRHOV) * vL ) )
                  aL  = sqrt( gamma * pL / rhoL ) 
                  ML  = sqrt(uL * uL + vL * vL) / aL
                  Rplus = vnL + 2.0_RP * dimensionless % cv * aL
!
!                 second stage: compute the "right" state depending on the result
!                 ---------------------------------------------------------------
                  if ( vnL .le. 0.0_RP ) then
!
!                    Entering fluid
!                    --------------
                     if ( ML .gt. 1.0_RP ) then
!
!                       Supersonic
!                       ----------
                        edge % uB(iXi,:) = q
#ifdef NAVIER_STOKES
                        edge % viscousBCType(iXi) = DIRICHLET
#endif
      
                     else
!  
!                       Subsonic
!                       --------
                        pR = pL
                        rhoR = ( pR / sExt ) ** (1.0_RP / gamma)
                        aR = sqrt(gamma * pR / rhoR)

                        if ( self % mode .eq. SPECIFY_SPEED ) then
                           edge % uB(iXi,IRHO) = q(IRHO)
                           edge % uB(iXi,IRHOU) = q(IRHOU)
                           edge % uB(iXi,IRHOV) = q(IRHOV)
                           edge % uB(iXi,IRHOE) = cv * pR + 0.5_RP * ( edge % uB(iXi,IRHOU) * edge % uB(iXi,IRHOU) + edge % uB(iXi,IRHOV) * edge % uB(iXi,IRHOV) ) / edge % uB(iXi,IRHO)

                        elseif ( self % mode .eq. SPECIFY_TOTAL_PRESSURE ) then
                           if ( pR .ge. ptExt ) then
                              MR = -sqrt(2.0_RP / gm1 * ( ( pR / ptExt) ** (gm1 / gamma) - 1.0_RP ) )
                           else
                              MR = sqrt(2.0_RP / gm1 * ( (ptExt/pR) ** (gm1/gamma) - 1.0_RP ) )
                           end if
      
                           edge % uB(iXi,IRHO) = rhoR
                           edge % uB(iXi,IRHOU) = rhoR * aR * MR * nInfty(IX)
                           edge % uB(iXi,IRHOV) = rhoR * aR * MR * nInfty(IY)
                           edge % uB(iXi,IRHOE) = cv * pR + 0.5_RP * rhoR * aR * aR * MR * MR

                        end if
#ifdef NAVIER_STOKES
                        edge % viscousBCType(iXi) = DIRICHLET
#endif
   
                     end if
    
                  else
!
!                    Leaving flow
!                    ------------
                     if ( ML .gt. 1.0_RP ) then
!
!                       Supersonic
!                       ----------
                        edge % uB(iXi,:) = edge % storage(1) % Q(iXi, 1:NCONS)
#ifdef NAVIER_STOKES
                        edge % viscousBCType(iXi) = NEUMANN
#endif

                     else
!
!                       Subsonic
!                       --------
                        edge % uB(iXi,IRHO)  = edge % storage(1) % Q(iXi,IRHO)
                        edge % uB(iXi,IRHOU) = edge % storage(1) % Q(iXi,IRHOU)
                        edge % uB(iXi,IRHOV) = edge % storage(1) % Q(iXi,IRHOV)
      
                        if ( self % outflowPressure .eq. STATIC_PRESSURE ) then
                           edge % uB(iXi,IRHOE) = cv * (2.0_RP * pExt - pL) +  0.5_RP * ( edge % uB(iXi,IRHOU) * uL + edge % uB(iXi,IRHOV) * vL )

                        elseif ( self % outflowPressure .eq. TOTAL_PRESSURE ) then
                           edge % uB(iXi,IRHOE) = cv * (2.0_RP * ptExt - pL) +  0.5_RP * ( edge % uB(iXi,IRHOU) * uL + edge % uB(iXi,IRHOV) * vL )

                        end if
#ifdef NAVIER_STOKES
                        edge % viscousBCType(iXi) = DIRICHLET
#endif

                     end if
                  end if

               end do 

#ifdef NAVIER_STOKES
               edge % uSB(0:,1:) => edge % uB(0:,1:)
#endif
            class default
         end select

         end associate

      end subroutine newDirichletBC_UpdateSolution
