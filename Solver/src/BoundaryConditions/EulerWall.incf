!
!///////////////////////////////////////////////////////////////////////////////////////////////////////
!
!    HORSES2D - A high-order discontinuous Galerkin spectral element solver.
!    Copyright (C) 2017  Juan Manzanero Torrico (juan.manzanero@upm.es)
!
!    This program is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    This program is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with this program.  If not, see <http://www.gnu.org/licenses/>.
!
!////////////////////////////////////////////////////////////////////////////////////////////////////////
!
!
!///////////////////////////////////////////////////////////////////////////////////
!
!           EULER WALL
!           ----------
!///////////////////////////////////////////////////////////////////////////////////
!
      subroutine EulerWall_Associate( self , edge ) 
         implicit none  
         class(EulerWall_t)                  :: self
         class(Edge_t)                       :: edge

         associate( N => edge % spA % N )
         select type ( edge )
         
            type is (Edge_t)
               print*, "Only boundary edges are expected."
               stop "Stopped"

            type is (StraightBdryEdge_t)
               allocate ( edge % FB  ( NCONS , 0:N)  ) 
               allocate ( edge % uB  ( NCONS , 0:N)  ) 

               edge % inviscidBCType = self % WeakType
               edge % RiemannSolver => self % RiemannSolver

#ifdef NAVIER_STOKES
               allocate ( edge % uSB ( NCONS , 0:N )  ) 
               edge % viscousBCType = ADIABATIC 
#endif
 
            type is (CurvedBdryEdge_t)
               allocate ( edge % FB  ( NCONS , 0:N )  ) 
               allocate ( edge % uB  ( NCONS , 0:N )  ) 

               edge % inviscidBCType = self % WeakType
               edge % RiemannSolver => self % RiemannSolver

#ifdef NAVIER_STOKES
               allocate ( edge % uSB ( NCONS , 0:N )  ) 
               edge % viscousBCType = ADIABATIC 
#endif

            class default
         end select
         end associate
                
      end subroutine EulerWall_Associate

      subroutine EulerWall_UpdateSolution( self , edge , time)
         implicit none  
         class(EulerWall_t)                  :: self
         class(Edge_t)                       :: edge
         real(kind=RP)                       :: time
         real(kind=RP)                       :: q(NCONS , 0 : edge % spA % N) , F(NCONS,0:edge % spA % N,NDIM)
         real(kind=RP)                       :: rhovn(0 : edge % spA % N) , rhovt(0 : edge % spA % N)
         real(kind=RP)                       :: p(0 : edge % spA % N)
         integer                             :: iXi
         integer                             :: dimID
         
         associate( N => edge % spA % N , gm1 => Thermodynamics % gm1 , gamma => Thermodynamics % gamma , Mach => Dimensionless % Mach )
   
         select type ( edge ) 
            type is (StraightBdryEdge_t)
!
!              The flux is computed by substracting the normal velocity to the interior state. Pressure and density are gathered from the interior
!              -----------------------------------------------------------------------------------------------------------------------------------
               rhovn = (edge % storage(1) % Q(IRHOU,0:N) * edge % n(IX,0) + edge % storage(1) % Q(IRHOV,0:N) * edge % n(IY,0) )
               rhovt = (-edge % storage(1) % Q(IRHOU,0:N) * edge % n(IY,0) + edge % storage(1) % Q(IRHOV,0:N) * edge % n(IX,0) )
               p     = getPressure( N , edge % storage(1) % Q )

               q(IRHO,0:N)  = edge % storage(1) % Q(IRHO,0:N)
               q(IRHOU,0:N) = edge % storage(1) % Q(IRHOU,0:N) - rhovn * edge % n(IX,0)
               q(IRHOV,0:N) = edge % storage(1) % Q(IRHOV,0:N) - rhovn * edge % n(IY,0)
               q(IRHOE,0:N) = Dimensionless % cv * p + 0.5_RP * rhovt * rhovt / edge % storage(1) % Q(IRHO,0:N)
!
!              Compute the fluxex from the built state
!              ---------------------------------------
               F = inviscidFlux( N , q )
!
!              Compute the normal flux
!              -----------------------
               edge % FB = 0.0_RP
               do dimID = 1 , NDIM  ; do iXi = 0 , N
                  edge % FB(:,iXi) = edge % FB(:,iXi) + F(:,iXi,dimID) * edge % n(dimID,0) * edge % dS(0)
               end do               ; end do
!
!              Compute the variables state
!              ---------------------------
               edge % uB(IRHO,0:N)  = edge % storage(1) % Q(IRHO,0:N)
               edge % uB(IRHOU,0:N) = edge % storage(1) % Q(IRHOU,0:N) - 2.0_RP * rhovn * edge % n(IX,0)
               edge % uB(IRHOV,0:N) = edge % storage(1) % Q(IRHOV,0:N) - 2.0_RP * rhovn * edge % n(IY,0)
               edge % uB(IRHOE,0:N) = edge % storage(1) % Q(IRHOE,0:N)
#ifdef NAVIER_STOKES   
               edge % uSB = q
#endif
      
            type is (CurvedBdryEdge_t)
!
!              The flux is computed by substracting the normal velocity to the interior state. Pressure and density are gathered from the interior
!              -----------------------------------------------------------------------------------------------------------------------------------
               rhovn = (edge % storage(1) % Q(IRHOU,0:N) * edge % n(IX,0:N) + edge % storage(1) % Q(IRHOV,0:N) * edge % n(IY,0:N) )
               rhovt = (edge % storage(1) % Q(IRHOU,0:N) * edge % n(IY,0:N) - edge % storage(1) % Q(IRHOV,0:N) * edge % n(IX,0:N) )
               p     = getPressure( N , edge % storage(1) % Q )

               q(IRHO,0:N)  = edge % storage(1) % Q(IRHO,0:N)
               q(IRHOU,0:N) = edge % storage(1) % Q(IRHOU,0:N) - rhovn * edge % n(IX,0:N)
               q(IRHOV,0:N) = edge % storage(1) % Q(IRHOV,0:N) - rhovn * edge % n(IY,0:N)
               q(IRHOE,0:N) = Dimensionless % cv * p + 0.5_RP * rhovt * rhovt / edge % storage(1) % Q(IRHO,0:N)
!
!              Compute the fluxex from the built state
!              ---------------------------------------
               F = inviscidFlux( N , q )
!
!              Compute the normal flux
!              -----------------------
               do dimID = 1 , NDIM  ; do iXi = 0 , N
                  edge % FB(:,iXi) = edge % FB(:,iXi) + F(:,iXi,dimID) * edge % n(dimID,iXi) * edge % dS(iXi)
               end do               ; end do
!
!              Compute the variables state
!              ---------------------------
               edge % uB(IRHO,0:N)  = edge % storage(1) % Q(IRHO,0:N)
               edge % uB(IRHOU,0:N) = edge % storage(1) % Q(IRHOU,0:N) - 2.0_RP * rhovn * edge % n(IX,0:N)
               edge % uB(IRHOV,0:N) = edge % storage(1) % Q(IRHOV,0:N) - 2.0_RP * rhovn * edge % n(IY,0:N)
               edge % uB(IRHOE,0:N) = edge % storage(1) % Q(IRHOE,0:N)
#ifdef NAVIER_STOKES
               edge % uSB = q 
#endif
 
            class default
         end select

         end associate

      end subroutine EulerWall_UpdateSolution

