         subroutine Zone_LinkPeriodicZones( zone1 , zone2 ) 
!
!        **********************************************************************
!           This routine will connect edges in zone1 with edges in
!         zone2.
!              -> Edges in zone2 will be inverted so that both 
!                    have the same direction
!              -> For y-traslational periodic faces, their x-coordinate
!                    will be compared
!              -> For x-traslational periodic faces, their y-coordinate
!                    will be compared
!        **********************************************************************
!
            use Utilities
            use Physics
            implicit none
            class(Zone_t)           :: zone1
            class(Zone_t)           :: zone2
!           -------------------------------------------------
            class(PeriodicBC_t), pointer     :: BC1
            class(PeriodicBC_t), pointer     :: BC2
            integer                          :: edID1
            integer                          :: edID2
            class(StraightBdryEdge_t), pointer :: edge1
            class(StraightBdryEdge_t), pointer :: edge2
            integer                          :: coord
            logical                          :: areInverted
            logical                          :: sameEdges
!
!           Gather boundary conditions
!           --------------------------
            select type (B1 => zone1 % BC)
               type is (PeriodicBC_t)
                  BC1 => B1
            end select
            select type (B2 => zone2 % BC)
               type is (PeriodicBC_t)
                  BC2 => B2
            end select
!
!           Get the coordinate to look
!           --------------------------
            if ( ( BC1 % direction .eq. IX ) .and. ( BC2 % direction .eq. IX ) ) then
               coord = IY
            elseif ( ( BC1 % direction .eq. IY ) .and. ( BC2 % direction .eq. IY ) ) then
               coord = IX
            end if


            do edID1 = 1 , zone1 % no_of_edges
!
!              Get edge1
!              ---------
               select type ( ed1 => zone1 % edges(edID1) % f)
                  type is (StraightBdryEdge_t)
                     edge1 => ed1
               end select

               do edID2 = 1 , zone2 % no_of_edges
!
!                 Get edge2
!                 ---------  
                  select type ( ed2 => zone2 % edges(edID2) % f )
                     type is (StraightBdryEdge_t)
                        edge2 => ed2
                  end select

                  if ( .not. edge2 % associated ) then   ! Look in this edge
                     sameEdges = (( almostEqual ( edge1 % nodes(1) % n % x(coord) , edge2 % nodes(1) % n % x(coord) ) .and. &
                                    almostEqual ( edge1 % nodes(2) % n % x(coord) , edge2 % nodes(2) % n % x(coord) ) ) &
                                                                  .or.     &
                                 (  almostEqual ( edge1 % nodes(1) % n % x(coord) , edge2 % nodes(2) % n % x(coord) ) .and. &
                                    almostEqual ( edge1 % nodes(2) % n % x(coord) , edge2 % nodes(1) % n % x(coord) ) ) )

                     if ( sameEdges ) then
!                       
!                       The pairing is found. Steps to perform:
!                          -> Link edge2 with edge1 
!                          -> Link edge1 with edge2 
!                          -> Check whether they need an inversion
!                       ----------------------------------------------
                        areInverted = checkIfAreInverted( edge1 , edge2 )
                        edge2 % inverse = areInverted
                        edge1 % inverse = areInverted
                        edge2 % associated = .true.
                        edge1 % associated = .true.
                        edge1 % inviscidBCType = WEAK_RIEMANN
                        edge2 % inviscidBCType = WEAK_RIEMANN

                        edge1 % uB(0:,1:)    => edge2 % storage(1) % Q(0:,1:)
                        edge2 % uB(0:,1:)    => edge1 % storage(1) % Q(0:,1:)
#ifdef NAVIER_STOKES
                        edge1 % uSB(0:,1:)   => edge2 % storage(1) % Q(0:,1:)
                        edge2 % uSB(0:,1:)   => edge1 % storage(1) % Q(0:,1:)
                        edge1 % gB(0:,1:,1:)   => edge2 % storage(1) % dQ(0:,1:,1:)
                        edge2 % gB(0:,1:,1:)   => edge1 % storage(1) % dQ(0:,1:,1:)
                        edge1 % viscousBCType = PERIODIC
                        edge2 % viscousBCType = PERIODIC
#endif

                     end if
                  end if
               end do
            end do

            BC1 % associated = .true.
            BC2 % associated = .true.


         end subroutine Zone_LinkPeriodicZones

         subroutine Zone_UpdateSolution( self )
            implicit none
            class(Zone_t)           :: self
            integer                 :: edID

            do edID = 1 , self % no_of_edges
               call self % BC % UpdateSolution( self % edges(edID) % f )
            end do

         end subroutine Zone_UpdateSolution

         subroutine Zone_Describe( self ) 
            use Headers
            implicit none
            class(Zone_t)        :: self
            character(len=STR_LEN_MESH)  :: label

            write(label,'(A,I0,A)') "Zone ",self % marker, " description"
            write(STD_OUT, '(/)')
            call SubSection_Header(trim(label))
            write(STD_OUT, '(30X,A,A25,I0)') "-> " , "Number of edges: " , self % no_of_edges

            if ( associated ( self % BC ) ) then
               write(STD_OUT, '(30X,A,A25,A)') "-> " , "Boundary zone tag: " , trim(self % BC % Name)
               call self % BC % Describe
            end if

         end subroutine Zone_Describe

         logical pure function checkIfAreInverted ( edge1 , edge2 )
            use Physics
            implicit none
            class(Edge_t), intent(in)        :: edge1
            class(Edge_t), intent(in)        :: edge2
!           ---------------------------------------------------
            real(kind=RP)                    :: dotProduct
            
            dotProduct = dot_product( edge1 % dX(IX:IY,0) , edge2 % dX(IX:IY,0) )

            if (dotProduct .ge. 0.0_RP) then
               checkIfAreInverted = .false.
      
            else
               checkIfAreInverted = .true.

            end if

         end function checkIfAreInverted
