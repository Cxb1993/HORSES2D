  subroutine CurvilinearEdge_SetCurve( self , points , order )
     use InterpolationAndDerivatives
     use MatrixOperations
     implicit none
     class(CurvedBdryEdge_t)                            :: self
     real(kind=RP)               , intent(in), optional :: points(:,:)
     integer                     , intent(in), optional :: order
!    -----------------------------------------------------------------------------
     real(kind=RP), allocatable                         :: CGLnodes(:)
     real(kind=RP), allocatable                         :: T(:,:)
     real(kind=RP), allocatable                         :: wb(:)
     integer                                            :: node

     if ( present(points) .and. present(order) ) then

        allocate( CGLnodes(0 : order ) )
        allocate( wb(0 : order ) )
        allocate( T(0: self % spA % N , 0: order ) )
  
        CGLnodes = reshape ( (/(0.5_RP + 0.5_RP*cos(PI*(order - node)/(1.0_RP*order)),node = 0,order)/),(/order+1/) )
  
        call BarycentricWeights( N = order , x = CGLnodes , w = wb )
        call PolynomialInterpolationMatrix( N = order , M = self % spA % N, oldNodes = CGLnodes, weights = wb, newNodes = self % spA % xi , T = T)
  
        self % X  = Mat_x_Mat_F ( A = points   , B = T              , trB = .true. ) 
        self % dX = Mat_x_Mat_F ( A = self % X , B = self % spA % D , trB = .true. ) 

        self % dS(iX,:) =   self % dX(iY,:)
        self % dS(iY,:) = - self % dX(iX,:)
  
     else

         print*, "Missing curve interpolation data"
         stop "Stopped."

     end if

  end subroutine CurvilinearEdge_SetCurve

  function Curvilinear_InterpolantX( self , xi , direction ) result( p )
      use MatrixOperations
      implicit none
      class(CurvedBdryEdge_t), intent (in)           :: self
      real(kind=RP),           intent (in)           :: xi
      integer      ,           intent (in), optional :: direction
      real(kind=RP)                                  :: p(NDIM)
!     ------------------------------------------------------------
      real(kind=RP)                        :: correctedXi
      
      if (direction .eq. BACKWARD) then
        correctedXi = 1.0_RP - xi
      elseif (direction .eq. FORWARD) then
        correctedXi = xi
      end if 

      p = MatrixTimesVector_F( self % X , self % spA % lj(correctedXi) )
      
  end function Curvilinear_InterpolantX

  function Curvilinear_InterpolantdS( self , xi , direction ) result( dS )
      use MatrixOperations
      implicit none
      class(CurvedBdryEdge_t), intent (in)           :: self
      real(kind=RP),           intent (in)           :: xi
      integer,                 intent (in), optional :: direction
      real(kind=RP)                                  :: dS(NDIM)
!     --------------------------------------------------------------
      real(kind=RP)                        :: correctedXi
      
      if (direction .eq. BACKWARD) then
        correctedXi = 1.0_RP - xi
      elseif (direction .eq. FORWARD) then
        correctedXi = xi
      end if 

      dS = MatrixTimesVector_F( self % dS , self % spA % lj(correctedXi) )

   end function Curvilinear_InterpolantdS

  function Curvilinear_InterpolantdX( self , xi , direction ) result( dX )
      use MatrixOperations
      implicit none
      class(CurvedBdryEdge_t), intent (in)           :: self
      real(kind=RP),           intent (in)           :: xi
      integer      ,           intent (in), optional :: direction
      real(kind=RP)                                  :: dX(NDIM)
!     ------------------------------------------------------------
      real(kind=RP)                        :: correctedXi
      
      if (direction .eq. BACKWARD) then
        correctedXi = 1.0_RP - xi
      elseif (direction .eq. FORWARD) then
        correctedXi = xi
      end if 

      dX = real(direction,kind=RP) * MatrixTimesVector_F( self % dX , self % spA % lj(correctedXi) )

  end function Curvilinear_InterpolantdX

 
