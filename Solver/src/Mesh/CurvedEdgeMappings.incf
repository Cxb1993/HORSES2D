   function Curvilinear_InterpolantX( self , xi , direction ) result( p )
      use MatrixOperations
      implicit none
      class(CurvedBdryEdge_t), intent (in) :: self
      real(kind=RP),           intent (in) :: xi
      integer      ,           intent (in) :: direction
      real(kind=RP)                        :: p(2)
!     ------------------------------------------------------------
      real(kind=RP), allocatable           :: auxp(:,:)
      real(kind=RP)                        :: correctedXi
      real(kind=RP), allocatable           :: lj(:,:)
      
      if (direction .eq. BACKWARD) then
        correctedXi = 1.0_RP - xi
      elseif (direction .eq. FORWARD) then
        correctedXi = xi
      end if 

      allocate(lj( 0 : self % spA % N , 1 ) )
      allocate(auxp(NDIM , 1) )
      lj(:,1) = self % spA % lj(correctedXi)

      auxp(1:NDIM,1:) = MatrixMultiply_F( self % X , lj )

      p = auxp(1:NDIM,1)
      
      deallocate(lj , auxp)

   end function Curvilinear_InterpolantX

  function Curvilinear_InterpolantdS( self , xi , direction ) result( dS )
      use MatrixOperations
      implicit none
      class(CurvedBdryEdge_t), intent(in)        :: self
      real(kind=RP), intent(in)        :: xi
      integer,       intent(in)        :: direction
      real(kind=RP)                    :: dS(2)
!     --------------------------------------------------------------
      real(kind=RP), allocatable           :: dP(:,:)
      real(kind=RP), allocatable           :: auxdS(:,:)
      real(kind=RP), allocatable           :: lj(:,:)
      real(kind=RP)                        :: correctedXi
      
      if (direction .eq. BACKWARD) then
        correctedXi = 1.0_RP - xi
      elseif (direction .eq. FORWARD) then
        correctedXi = xi
      end if 

      allocate(dP(NDIM , 0 : self % spA % N) )
      allocate(lj(0 : self % spA % N , 1 ) )
      allocate(auxdS(NDIM , 1) )

      lj(:,1) = self % spA % lj(correctedXi)

      associate ( D => self % spA % D )
      
         dP = NormalMat_x_TransposeMat_F( self % X , D )
         auxdS(1:NDIM,1:) = MatrixMultiply_F( dP , lj ) 
      
      end associate

      dS(1) = -auxdS(2 , 1)
      dS(2) = auxdS(1,1)
   
      deallocate( lj , dP , auxdS )

   end function Curvilinear_InterpolantdS

   function Edge_getX( self , iXi , direction ) result ( X ) 
      implicit none
      class(Edge_t), intent(in)                 :: self
      integer      , intent(in)                 :: iXi
      integer      , intent(in)                 :: direction
      real(kind=RP)                             :: X (NDIM)
!     -------------------------------------------------------------
      integer                                   :: correctediXi

      if (direction .eq. FORWARD) then
         correctediXi = iXi
      
      elseif (direction .eq. BACKWARD) then
         correctediXi = self % spA % N - iXi

      end if

      X = self % X(iX:iY,correctediXi)

   end function Edge_getX

   function Edge_getdX( self , iXi , direction ) result ( dX ) 
      implicit none
      class(Edge_t), intent(in)                 :: self
      integer      , intent(in)                 :: iXi
      integer      , intent(in)                 :: direction
      real(kind=RP)                             :: dX (NDIM)
!     -------------------------------------------------------------
      integer                                   :: correctediXi
      real(kind=RP)                             :: newsign

      if (direction .eq. FORWARD) then
         correctediXi = iXi
         newsign = 1.0_RP
      
      elseif (direction .eq. BACKWARD) then
         correctediXi = self % spA % N - iXi
         newsign = -1.0_RP

      end if

      dX = newsign * self % dX(iX:iY,correctediXi)

   end function Edge_getdX
