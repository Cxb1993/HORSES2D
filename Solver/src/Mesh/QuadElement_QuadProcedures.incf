!
!///////////////////////////////////////////////////////////////////////////////////////////////////////
!
!    HORSES2D - A high-order discontinuous Galerkin spectral element solver.
!    Copyright (C) 2017  Juan Manzanero Torrico (juan.manzanero@upm.es)
!
!    This program is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    This program is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with this program.  If not, see <http://www.gnu.org/licenses/>.
!
!////////////////////////////////////////////////////////////////////////////////////////////////////////
!
        subroutine QuadElement_SetStorage( self , storage )
            use SMConstants
            use Storage_module
            use Setup_class
            use Physics
            implicit none
            class(QuadElement_t)      :: self
            class(Storage_t)        :: storage
        

            associate ( N => self % spA % N )
             self % Q    ( 0:N , 0:N , 1:NCONS          ) => storage % Q    ( self % address: ) 
             self % QDot ( 0:N , 0:N , 1:NCONS          ) => storage % QDot ( self % address: ) 
#ifdef NAVIER_STOKES
             self % dQ   ( 0:N , 0:N , 1:NDIM , 1:NCONS ) => storage % dQ   ( (self % address-1)*NDIM + 1: ) 
#endif
            end associate

        end subroutine QuadElement_SetStorage
#ifdef NAVIER_STOKES
        function QuadElement_ComputeInteriorGradient( self )  result (dQ)
            use MatrixOperations
!   
!           **********************************************************************
!                 This subroutine computes the contravariant components of the element
!              gradients as:
!                    F <- F * Ja(1,1) + G * Ja(2,1)
!                    G <- F * Ja(1,2) + G * Ja(2,2)
!           **********************************************************************
!   
            implicit none  
            class(QuadElement_t)   :: self
            real(kind=RP)          :: dQ(0:self % spA % N , 0:self % spA % N , 1:NDIM , 1:NCONS)
!           -------------------------------------------------------------
            real(kind=RP)              :: dxiQ (0:self % spA % N,0:self % spA % N, 1:NCONS)
            real(kind=RP)              :: detaQ(0:self % spA % N,0:self % spA % N, 1:NCONS)
            integer                    :: var
   
            associate( N => self % spA % N )
            
            dxiQ  = MatrixMultiplyInIndex_F( self % Q , self % spA % DT , N+1 , N+1 , NCONS , IX)
            detaQ = MatrixMultiplyInIndex_F( self % Q , self % spA % DT , N+1 , N+1 , NCONS , IY)

            do var = 1 , NCONS
!              
!              x-direction gradient
!              --------------------
               dQ(0:N,0:N,IX,var) = (dxiQ(0:N,0:N,var) * self % Ja(0:N,0:N,1,1) + detaQ(0:N,0:N,var) * self % Ja(0:N,0:N,1,2)) / self % jac(0:N,0:N)
!              
!              y-direction gradient
!              --------------------
               dQ(0:N,0:N,IY,var) = (dxiQ(0:N,0:N,var) * self % Ja(0:N,0:N,2,1) + detaQ(0:N,0:N,var) * self % Ja(0:N,0:N,2,2)) / self % jac(0:N,0:N)

            end do
            end associate
            
      end function QuadElement_ComputeInteriorGradient
#endif
