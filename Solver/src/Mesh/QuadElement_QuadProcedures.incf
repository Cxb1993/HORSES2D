!
!///////////////////////////////////////////////////////////////////////////////////////////////////////
!
!    HORSES2D - A high-order discontinuous Galerkin spectral element solver.
!    Copyright (C) 2017  Juan Manzanero Torrico (juan.manzanero@upm.es)
!
!    This program is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    This program is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with this program.  If not, see <http://www.gnu.org/licenses/>.
!
!////////////////////////////////////////////////////////////////////////////////////////////////////////
!
        subroutine QuadElement_SetStorage( self , storage )
            use SMConstants
            use Storage_module
            use Setup_class
            use Physics
            implicit none
            class(QuadElement_t)      :: self
            class(Storage_t)        :: storage
        

            associate ( N => self % spA % N )
             self % Q    ( 1:NCONS , 0:N , 0:N           ) => storage % Q    ( self % address: ) 
             self % QDot ( 1:NCONS , 0:N , 0:N           ) => storage % QDot ( self % address: ) 
#ifdef NAVIER_STOKES
             self % dQ   ( 1:NCONS , 0:N , 0:N , 1:NDIM  ) => storage % dQ   ( (self % address-1)*NDIM + 1: ) 
#endif
            end associate

        end subroutine QuadElement_SetStorage
#ifdef NAVIER_STOKES
        function QuadElement_ComputeInteriorGradient( self )  result (dQ)
            use MatrixOperations
!   
!           **********************************************************************
!                 This subroutine computes the contravariant components of the element
!              gradients as:
!                    F <- F * Ja(1,1) + G * Ja(2,1)
!                    G <- F * Ja(1,2) + G * Ja(2,2)
!           **********************************************************************
!   
            implicit none  
            class(QuadElement_t)   :: self
            real(kind=RP)          :: dQ(1:NCONS , 0:self % spA % N , 0:self % spA % N , 1:NDIM )
!           -------------------------------------------------------------
            real(kind=RP)              :: dxiQ (1:NCONS,0:self % spA % N,0:self % spA % N)
            real(kind=RP)              :: detaQ(1:NCONS,0:self % spA % N,0:self % spA % N)
            integer                    :: var , j , l , i 
   
            associate( N => self % spA % N )
            
            dxiQ = 0.0_RP
            detaQ = 0.0_RP

            do j = 0 , self % spA % N ; do l = 0 , self % spA % N ; do i = 0 , self % spA % N 
                  dxiQ(:,i,j) = dxiQ(:,i,j) + self % spA % D(i,l) * self % Q(:,l,j)
            end do                    ; end do                    ; end do


            do j = 0 , self % spA % N ; do l = 0 , self % spA % N ; do i = 0 , self % spA % N 
                  detaQ(:,i,j) = detaQ(:,i,j) + self % spA % DT(l,j) * self % Q(:,i,l)
            end do                    ; end do                    ; end do

            do i = 0 , self % spA % N ; do j = 0 , self % spA % N
!              
!              x-direction gradient
!              --------------------
               dQ(:,i,j,IX) = (dxiQ(:,i,j) * self % Ja(i,j,1,1) + detaQ(:,i,j) * self % Ja(i,j,1,2)) / self % jac(i,j)
!              
!              y-direction gradient
!              --------------------
               dQ(:,i,j,IY) = (dxiQ(:,i,j) * self % Ja(i,j,2,1) + detaQ(:,i,j) * self % Ja(i,j,2,2)) / self % jac(i,j)

            end do                    ; end do

            end associate
            
      end function QuadElement_ComputeInteriorGradient
#endif
