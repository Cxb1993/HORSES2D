         function Compute_volumeIntegral( self , var ) result ( val )
            use MatrixOperations
            use Physics
            implicit none
            class(QuadMesh_T)          :: self
            character(len=*)           :: var
            real(kind=RP)              :: val
            real(kind=RP), allocatable :: variable(:,:)
!           ----------------------------------------------            
            integer                    :: eID
            
            val = 0.0_RP
            if ( trim(var) .eq. "One" ) then
               do eID = 1 , self % no_of_elements
            
                  associate ( e => self % elements(eID) ) 

                  val = val + BilinearForm_F( e % jac , e % spA % w , e % spA % w )
   
                  end associate

               end do

            elseif ( trim(var) .eq. "dSnorm" ) then
               do eID = 1 , self % no_of_elements
                  associate ( e => self % elements(eID) ) 
                  associate ( N => e % spA % N ) 

                  if ( allocated(variable) ) deallocate (variable)
                  allocate ( variable(0:e % spA % N , 0 : e % spA % N) )

!                  variable = self % elements(eID) % W(0:N,0:N,IP) / (self % elements(eID) % W(0:N,0:N,IRHO)) ** ( thermodynamics % gamma ) - 1.0_RP
!                  variable = variable * variable * e % jac
!                  val = val + BilinearForm_F( variable , e % spA % w , e % spA % w ) 

                  end associate
                  end associate
               end do
   
!               val = sqrt(val)
      
            end if
               
         end function Compute_volumeIntegral
   
         function Compute_ScalarScalarSurfaceIntegral( self , var , zone ) result ( val )
            use MatrixOperations
            use Physics
            implicit none
            class(QuadMesh_t)             :: self
            character(len=*)              :: var
            integer                       :: zone
            real(kind=RP)                 :: val
!           --------------------------------------------------------------
            real(kind=RP), pointer        :: variable(:) => NULL()
            integer                       :: edID

            val = 0.0_RP

            select case ( trim(var) ) 
   
               case ( "Surface" )
                  
                  do edID = 1 , self % zones(zone) % no_of_edges
                     associate ( f => self % zones(zone) % edges(edID) % f )
                     select type (f)
                        type is (Edge_t)
                           val = val + sum(f % spA % w * f % dS(0) )
   
                        type is (StraightBdryEdge_t)
                           val = val + sum(f % spA % w * f % dS(0) )
      
                        type is (CurvedBdryEdge_t)
                           val = val + sum(f % spA % w * f % dS )

                     end select
                     end associate
                  end do

               case ( "pressure" )
               
                  do edID = 1 , self % zones(zone) % no_of_edges
                     associate ( f => self % zones(zone) % edges(edID) % f )
                     associate ( N => f % spA % N )

!                     variable => f % storage(1) % w(0:N , IP )
!                     val = val + dot_product(variable * norm2(f % dS , dim = 1) , f % spA % w)

                     end associate
                     end associate
                  end do

               case ( "density" )

                  do edID = 1 , self % zones(zone) % no_of_edges
                     associate ( f => self % zones(zone) % edges(edID) % f )
                     associate ( N => f % spA % N )

!                     variable => f % storage(1) % w(0:N , IP )
!                     val = val + dot_product(variable * norm2(f % dS , dim = 1) , f % spA % w)

                     end associate
                     end associate
                  end do
   
            end select

         end function Compute_ScalarScalarSurfaceIntegral

         function Compute_ScalarVectorSurfaceIntegral( self , var , zone ) result ( val )
            use Physics
            use MatrixOperations
            implicit none
            class(QuadMesh_t)             :: self
            character(len=*)              :: var
            integer                       :: zone
            real(kind=RP)                 :: val(1:NDIM)
!           --------------------------------------------------------------
            integer                       :: edID , j

            val = 0.0_RP

            select case ( trim(var) ) 
   
               case ( "pressure" )
               
                  do edID = 1 , self % zones(zone) % no_of_edges
                     associate ( f => self % zones(zone) % edges(edID) % f )
                     associate ( N => f % spA % N )

!                     do j = 0 , N
!                        val(IX:IY) = val(IX:IY) + f % storage(1) % W(j,IP) * f % spA % w(j) * f % dS(IX:IY,j)
!                     end do

                     end associate
                     end associate
                  end do

            end select

         end function Compute_ScalarVectorSurfaceIntegral

         function Compute_VectorVectorSurfaceIntegral( self , var , zone ) result ( val )
            use Physics
            use MatrixOperations
            implicit none
            class(QuadMesh_t)             :: self
            character(len=*)              :: var
            integer                       :: zone
            real(kind=RP)                 :: val
!           --------------------------------------------------------------
            integer                       :: edID

            val = 0.0_RP

            select case ( trim(var) ) 
   
               case ( "mass-flow" )
               
                  do edID = 1 , self % zones(zone) % no_of_edges
                     associate ( f => self % zones(zone) % edges(edID) % f )
                     associate ( N => f % spA % N )

!                     val = val + dot_product ( f % spA % w , ( f % storage(1) % Q(0:N,IRHOU) * f % dS(IX,0:N) + f % storage(1) % Q(0:N,IRHOV) * f % dS(IY,0:N) ) )

                     end associate
                     end associate
                  end do

               case ( "flow" )

                  do edID = 1 , self % zones(zone) % no_of_edges
                     associate ( f => self % zones(zone) % edges(edID) % f )
                     associate ( N => f % spA % N )

!                     val = val + dot_product ( f % spA % w , ( f % storage(1) % W(0:N,IU) * f % dS(IX,0:N) + f % storage(1) % W(0:N,IV) * f % dS(IY,0:N) ) )

                     end associate
                     end associate
                  end do

            end select

         end function Compute_VectorVectorSurfaceIntegral

         function Compute_TensorVectorSurfaceIntegral( self , var , zone ) result ( val )
            use Physics
            use MatrixOperations
            implicit none
            class(QuadMesh_t)             :: self
            character(len=*)              :: var
            integer                       :: zone
            real(kind=RP)                 :: val(NDIM)
!           --------------------------------------------------------------
            real(kind=RP), allocatable    :: tau(:,:,:)
            real(kind=RP), pointer        :: dQ(:,:,:)
            integer                       :: edID , j 

            val = 0.0_RP

            select case ( trim(var) ) 
   
               case ( "viscous" )
               
                  do edID = 1 , self % zones(zone) % no_of_edges
                     associate ( f => self % zones(zone) % edges(edID) % f )
                     associate ( N => f % spA % N )
                     allocate ( tau(0:N , 1:NDIM , 1:NDIM ) )
#ifdef NAVIER_STOKES
!                     dQ => f % storage(1) % dQ ( 0:N,1:NDIM,1:NGRAD ) 
#endif
!                     tau = ComputeViscousTensor( N , dQ )

                     do j = 0 , N
!                        val(IX) = val(IX) + f % spA % w(j) * ( tau(j,IX,IX) * f % dS(IX,j) + tau(j,IX,IY) * f % dS(IY,j) )
!                        val(IY) = val(IY) + f % spA % w(j) * ( tau(j,IY,IX) * f % dS(IX,j) + tau(j,IY,IY) * f % dS(IY,j) )
                     end do

                     deallocate( tau )

                     end associate
                     end associate
                  end do

            end select

         end function Compute_TensorVectorSurfaceIntegral
