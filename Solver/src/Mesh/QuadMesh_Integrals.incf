!
!///////////////////////////////////////////////////////////////////////////////////////////////////////
!
!    HORSES2D - A high-order discontinuous Galerkin spectral element solver.
!    Copyright (C) 2017  Juan Manzanero Torrico (juan.manzanero@upm.es)
!
!    This program is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    This program is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with this program.  If not, see <http://www.gnu.org/licenses/>.
!
!////////////////////////////////////////////////////////////////////////////////////////////////////////
!
         function Compute_volumeIntegral( self , var ) result ( val )
            use MatrixOperations
            use Physics
            implicit none
            class(QuadMesh_T)          :: self
            character(len=*)           :: var
            real(kind=RP)              :: val
            real(kind=RP), allocatable :: variable(:,:)
!           ----------------------------------------------            
            integer                    :: eID
            
            val = 0.0_RP
            if ( trim(var) .eq. "One" ) then
               do eID = 1 , self % no_of_elements
            
                  associate ( e => self % elements(eID) ) 

                  val = val + BilinearForm_F( e % jac , e % spA % w , e % spA % w )
   
                  end associate

               end do

            elseif ( trim(var) .eq. "dSnorm" ) then
               do eID = 1 , self % no_of_elements
                  associate ( e => self % elements(eID) ) 
                  associate ( N => e % spA % N ) 

                  if ( allocated(variable) ) deallocate (variable)
                  allocate ( variable(1:NCONS , 0 : e % spA % N) )

                  variable = getPressure( N , self % elements(eID) % Q ) / ( self % elements(eID) % Q(IRHO,:,:) ** thermodynamics % gamma ) - 1.0_RP
                  variable = variable * variable * e % jac
                  val = val + BilinearForm_F( variable , e % spA % w , e % spA % w ) 

                  end associate
                  end associate
               end do
   
               val = sqrt(val)      

            end if
               
         end function Compute_volumeIntegral
   
         function Compute_ScalarScalarSurfaceIntegral( self , var , zone ) result ( val )
            use MatrixOperations
            use Physics
            implicit none
            class(QuadMesh_t)             :: self
            character(len=*)              :: var
            integer                       :: zone
            real(kind=RP)                 :: val
!           --------------------------------------------------------------
            real(kind=RP), pointer        :: variable(:) => NULL()
            integer                       :: edID

            val = 0.0_RP

            select case ( trim(var) ) 
   
               case ( "Surface" )
                  
                  do edID = 1 , self % zones(zone) % no_of_edges
                     associate ( f => self % zones(zone) % edges(edID) % f )
                     select type (f)
                        type is (Edge_t)
                           val = val + sum(f % spA % w * f % dS(0) )
   
                        type is (StraightBdryEdge_t)
                           val = val + sum(f % spA % w * f % dS(0) )
      
                        type is (CurvedBdryEdge_t)
                           val = val + sum(f % spA % w * f % dS )

                     end select
                     end associate
                  end do

               case ( "pressure" )
               
                  do edID = 1 , self % zones(zone) % no_of_edges
                     associate ( f => self % zones(zone) % edges(edID) % f )
                     associate ( N => f % spA % N )

                     allocate ( variable (0:N) )

                     variable = getPressure( N , f % storage(1) % Q )

                     select type ( f )
                        type is (Edge_t)
                           val = val + dot_product(variable * f % dS(0) , f % spA % w)
                  
                        type is (StraightBdryEdge_t) 
                           val = val + dot_product(variable * f % dS(0) , f % spA % w)

                        type is (CurvedBdryEdge_t)
                           val = val + dot_product(variable * f % dS , f % spA % w)

                     end select

                     deallocate( variable )
                     end associate
                     end associate
                  end do

               case ( "density" )

                  do edID = 1 , self % zones(zone) % no_of_edges
                     associate ( f => self % zones(zone) % edges(edID) % f )
                     associate ( N => f % spA % N )

                     variable => f % storage(1) % Q(0:N , IRHO )

                     select type ( f )
                        type is (Edge_t)
                           val = val + dot_product(variable * f % dS(0) , f % spA % w)
                  
                        type is (StraightBdryEdge_t) 
                           val = val + dot_product(variable * f % dS(0) , f % spA % w)

                        type is (CurvedBdryEdge_t)
                           val = val + dot_product(variable * f % dS , f % spA % w)

                     end select

                     variable => NULL()

                     end associate
                     end associate
                  end do
   
            end select

         end function Compute_ScalarScalarSurfaceIntegral

         function Compute_ScalarVectorSurfaceIntegral( self , var , zone ) result ( val )
            use Physics
            use MatrixOperations
            implicit none
            class(QuadMesh_t)             :: self
            character(len=*)              :: var
            integer                       :: zone
            real(kind=RP)                 :: val(1:NDIM)
!           --------------------------------------------------------------
            integer                       :: edID , j
            real(kind=RP)                 :: Q(1:NCONS)

            val = 0.0_RP

            select case ( trim(var) ) 
   
               case ( "pressure" )
               
                  do edID = 1 , self % zones(zone) % no_of_edges
                     associate ( f => self % zones(zone) % edges(edID) % f )
                     associate ( N => f % spA % N )

                     select type ( f )

                        type is (Edge_t)
                           do j = 0 , N
                              Q = f % storage(1) % Q(:,j)
                              val(IX:IY) = val(IX:IY) + getPressure( Q ) * f % spA % w(j) * f % n(IX:IY,0) * f % dS(0)
                           end do

                        type is (StraightBdryEdge_t)
                           do j = 0 , N
                              Q = f % storage(1) % Q(:,j)
                              val(IX:IY) = val(IX:IY) + getPressure( Q ) * f % spA % w(j) * f % n(IX:IY,0) * f % dS(0)
                           end do

                        type is (CurvedBdryEdge_t)
                           do j = 0 , N
                              Q = f % storage(1) % Q(:,j)
                              val(IX:IY) = val(IX:IY) + getPressure( Q ) * f % spA % w(j) * f % n(IX:IY,j) * f % dS(j) 
                           end do


                     end select 
                     end associate
                     end associate
                  end do

            end select

         end function Compute_ScalarVectorSurfaceIntegral

         function Compute_VectorVectorSurfaceIntegral( self , var , zone ) result ( val )
            use Physics
            use MatrixOperations
            implicit none
            class(QuadMesh_t)             :: self
            character(len=*)              :: var
            integer                       :: zone
            real(kind=RP)                 :: val
!           --------------------------------------------------------------
            integer                       :: edID
            integer                       :: i 

            val = 0.0_RP

            select case ( trim(var) ) 
   
               case ( "mass-flow" )
               
                  do edID = 1 , self % zones(zone) % no_of_edges
                     associate ( f => self % zones(zone) % edges(edID) % f )
                     associate ( N => f % spA % N )

                     select type ( f )
                        type is (Edge_t)
                           do i = 0 , f % spA % N
                              val = val + f % spA % w(i) * (f % storage(1) % Q(IRHOU,i) * f % n(IX,0) + f % storage(1) % Q(IRHOV,i) * f % n(IY,0)) * f % dS(0) 
                           end do

                        type is (StraightBdryEdge_t)
                           do i = 0 , f % spA % N 
                              val = val + f % spA % w(i) * (f % storage(1) % Q(IRHOU,i) * f % n(IX,0) + f % storage(1) % Q(IRHOV,i) * f % n(IY,0)) * f % dS(0) 
                           end do

                        type is (CurvedBdryEdge_t)
                           do i = 0 , f % spA % N
                              val = val + f % spA % w(i) * (f % storage(1) % Q(IRHOU,i) * f % n(IX,i) + f % storage(1) % Q(IRHOV,i) * f % n(IY,i) ) * f % dS(i) 
                           end do

                     end select

                     end associate
                     end associate
                  end do

               case ( "flow" )

                  do edID = 1 , self % zones(zone) % no_of_edges
                     associate ( f => self % zones(zone) % edges(edID) % f )
                     associate ( N => f % spA % N )

                     select type ( f )
                        type is (Edge_t)
                           do i = 0 , f % spA % N
                              val = val + f % spA % w(i) * ( f % storage(1) % Q(IRHOU,i) * f % n(IX,0) + f % storage(1) % Q(IRHOV,i)  * f % n(IY,0) ) * f % dS(0) / f % storage(1) % Q(IRHO , i)
                           end do

                        type is (StraightBdryEdge_t)
                           do i = 0 , f % spA % N
                              val = val + f % spA % w(i) * ( f % storage(1) % Q(IRHOU,i) * f % n(IX,0) + f % storage(1) % Q(IRHOV,i) * f % n(IY,0) ) * f % dS(0) / f % storage(1) % Q(IRHO,i)
                           end do

                        type is (CurvedBdryEdge_t)
                           do i = 0 , f % spA % N
                              val = val + f % spA % w(i) * ( f % storage(1) % Q(IRHOU,i) * f % n(IX,i) + f % storage(1) % Q(IRHOV,i) * f % n(IY,i) ) * f % dS(i) / f % storage(1) % Q(IRHO,i)
                           end do

                     end select

 
                     end associate
                     end associate
                  end do

            end select

         end function Compute_VectorVectorSurfaceIntegral

         function Compute_TensorVectorSurfaceIntegral( self , var , zone ) result ( val )
            use Physics
            use MatrixOperations
            implicit none
            class(QuadMesh_t)             :: self
            character(len=*)              :: var
            integer                       :: zone
            real(kind=RP)                 :: val(NDIM)
!           --------------------------------------------------------------
            real(kind=RP), allocatable    :: tau(:,:,:)
            real(kind=RP), pointer        :: dQ(:,:,:) , Q(:,:)
            integer                       :: edID , j 

            val = 0.0_RP

            select case ( trim(var) ) 
   
#ifdef NAVIER_STOKES
               case ( "viscous" )
               
                  do edID = 1 , self % zones(zone) % no_of_edges
                     associate ( f => self % zones(zone) % edges(edID) % f )
                     associate ( N => f % spA % N )
                     allocate ( tau(0:N , 1:NDIM , 1:NDIM ) )

                     dQ(1:,0:,1:) => f % storage(1) % dQ ( 1:NCONS,0:N,1:NDIM) 
                     Q(1:,0:)     => f % storage(1) % Q  ( 1:NCONS,0:N)
                     tau = ComputeViscousTensor( N , Q , dQ )

                     select type ( f )
   
                        type is (Edge_t)
                           do j = 0 , N
                              val(IX) = val(IX) + f % spA % w(j) * ( tau(j,IX,IX) * f % n(IX,0) + tau(j,IX,IY) * f % n(IY,0) ) * f % dS(0)
                              val(IY) = val(IY) + f % spA % w(j) * ( tau(j,IY,IX) * f % n(IX,0) + tau(j,IY,IY) * f % n(IY,0) ) * f % dS(0)
                           end do

                        type is (StraightBdryEdge_t)
                           do j = 0 , N
                              val(IX) = val(IX) + f % spA % w(j) * ( tau(j,IX,IX) * f % n(IX,0) + tau(j,IX,IY) * f % n(IY,0) ) * f % dS(0)
                              val(IY) = val(IY) + f % spA % w(j) * ( tau(j,IY,IX) * f % n(IX,0) + tau(j,IY,IY) * f % n(IY,0) ) * f % dS(0)
                           end do

                        type is (CurvedBdryEdge_t)
                           do j = 0 , N
                              val(IX) = val(IX) + f % spA % w(j) * ( tau(j,IX,IX) * f % n(IX,j) + tau(j,IX,IY) * f % n(IY,j) ) * f % dS(j)
                              val(IY) = val(IY) + f % spA % w(j) * ( tau(j,IY,IX) * f % n(IX,j) + tau(j,IY,IY) * f % n(IY,j) ) * f % dS(j)
                           end do

                     end select

                     deallocate( tau )

                     end associate
                     end associate
                  end do
#endif
            end select

         end function Compute_TensorVectorSurfaceIntegral
