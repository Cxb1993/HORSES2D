         subroutine constructElementsAndEdges( self  , meshFile , spA , Storage , spI)
             use MeshFileClass
             use Setup_class
             use Physics
             use NodesAndWeights_Class
             use MatrixOperations
             use IntegerArrayLinkedList
             implicit none
             class(QuadMesh_t),                 intent (inout)               :: self
             class(MeshFile_t),                 intent (in )                 :: meshFile
             class(NodalStorage),               intent (in )                 :: spA
             class(Storage_t),                  intent (in )                 :: storage
             class(NodesAndWeights_t), pointer, intent (in )                 :: spI
!
!            ---------------
!            Local variables
!            ---------------
!
             integer                                  :: address
             integer                                  :: node
             integer                                  :: edge
             integer                                  :: eID
             integer                                  :: el , el_L , el_R , el_R1 , el_R2
             integer                                  :: N
             integer                                  :: NLow 
             integer                                  :: curve
             type(Node_p)                             :: nodes(POINTS_PER_QUAD)
             logical                                  :: curvilinear
             class(IntegerArrayEntry_t), pointer      :: points_of_edges   => NULL()
             class(IntegerArrayEntry_t), pointer      :: elements_of_edges => NULL()
!
!            Construct elements
!            ------------------
             do eID = 1 , self % no_of_elements
!
!                Gather each element's nodes
!                ---------------------------
                 do node = 1 , POINTS_PER_QUAD
                    nodes(node) % n => self % nodes ( meshFile % points_of_elements(node , eID) ) 
                 end do
!
!                Get the solution memory address
!                -------------------------------
                 address = ( meshFile % cumulativePolynomialOrder(eID-1)  ) * NCONS + 1 
!
!                Construct the element
!                ---------------------
                 call self % elements(eID) % Construct( eID , nodes , meshFile % polynomialOrder(eID) , spA , address , storage , spI ) 

             end do
!
!            Construct edges: loop the points_of_edges linked list
!            -----------------------------------------------------
             points_of_edges     => meshFile % points_of_edges % head
             elements_of_edges   => meshFile % elements_of_edges % head

             do edge = 1 , self % no_of_edges
! 
!               Gather each edge's nodes in "nodes"
!               ----------------------------------
                do node = 1 , points_of_edges % N
                   nodes(node) % n => self % nodes ( points_of_edges % val(node) )
                end do
! 
!               Set whether the edge is straight or curved in "curvilinear"
!               -----------------------------------------------------------
                if (meshFile % curvilinear) then
                   curvilinear = any(meshFile % curved_Edges == edge)
                else
                   curvilinear = .false.
                end if
! 
!               Get its generic polynomial order: The largest within the neighbouring elements
!               ------------------------------------------------------------------------------
                if ( elements_of_edges % N .eq. ONE ) then
! 
!                  Boundary edge: Get the boundary order
!                  -------------------------------------
                   N    = self % elements( elements_of_edges % val(ONE) ) % spA % N
                   NLow = N 
 
                elseif ( elements_of_edges % N .eq. TWO ) then
! 
!                  Simple interior edge: The maximum of the adjacent elements
!                  ----------------------------------------------------------
                   N    = max ( self % elements( elements_of_edges % val(ONE) ) % spA % N , &
                                self % elements( elements_of_edges % val(TWO) ) % spA % N )
                   NLow = min ( self % elements( elements_of_edges % val(ONE) ) % spA % N , &
                                self % elements( elements_of_edges % val(TWO) ) % spA % N )
 
                elseif ( elements_of_edges % N .eq. THREE ) then
! 
!                  Divdided interior edge: The big element polynomial order
!                  --------------------------------------------------------
                   N    = self % elements( elements_of_edges % val( ONE ) ) % spA % N 
 
                   NLow = min ( self % elements( elements_of_edges % val( ONE ) ) % spA % N , &
                                self % elements( elements_of_edges % val( TWO ) ) % spA % N , &
                                self % elements( elements_of_edges % val(THREE) ) % spA % N )
    
 
                end if
! 
!               !!!!!!!!!!!!!!!!!!!
!               ===> Construct <===
!               ¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡
! 
                call self % edges(edge) % Construct( ID = edge  , curvilinear = curvilinear , N = N , NLow = NLow , &
                                                  nodes = nodes(1:points_of_edges % N) , edgeType = meshFile % edgeMarker(edge) , spA = spA , spI = spI )
! 
!               *********************
                if (curvilinear) then
!               *********************
!             
!                  Add the curve to the edge
!                  -------------------------
                   select type ( f => self % edges(edge) % f )
 
                      type is (CurvedEdge_t)
                         curve = minloc(abs(meshFile % curved_Edges - edge) , dim = 1 ) 
                         call f % SetCurve( meshFile % curvilinear_coords(:,:,curve) , meshFile % curves_polynomialorder )  
 
                      type is (CurvedBdryEdge_t) 
                         curve = minloc(abs(meshFile % curved_Edges -  edge) , dim = 1)
                         call f % SetCurve( meshFile % curvilinear_coords(:,:,curve) , meshFile % curves_polynomialorder )  
 
                      class default
 
                   end select
 
                else
                   call self % edges(edge) % f % SetCurve()
 
                end if
! 
!               ========================
!               Link elements with edges
!               ========================
! 
                if ( elements_of_edges % N .eq. ONE ) then
!
!                 Boundary edge
!                 -------------
                  el = elements_of_edges % val ( ONE ) 

                  call BdryEdge_LinkWithElements( self % edges(edge) , self % elements(el) )
              

                elseif ( elements_of_edges % N .eq. TWO ) then
!
!                 Simple interior edge
!                 --------------------
                  el_L = elements_of_edges % val ( ONE ) 
                  el_R = elements_of_edges % val ( TWO ) 

                  call Edge_linkWithElements( self % edges(edge) , self % elements(el_L) , self % elements(el_R) )

                elseif ( elements_of_edges % N .eq. THREE ) then
!
!                 Subdivided interior edge
!                 -------------------------
                  el_L  = elements_of_edges % val ( ONE )
                  el_R1 = elements_of_edges % val ( TWO )
                  el_R2 = elements_of_edges % val (THREE)

                  call SubdividedEdge_LinkWithElements( self % edges(edge) , self % elements(el_L ) , &
                                                                             self % elements(el_R1) , &
                                                                             self % elements(el_R2) , &
                                                                              spA                     )

                end if
! 
!               Move to the next elements in the list
!               -------------------------------------
                points_of_edges   => points_of_edges % next
                elements_of_edges => elements_of_edges % next

              end do
!
!              =================================
!              Compute the geometry of the quads
!              =================================
!
               do eID = 1 , self % no_of_elements
!
!                 Compute the element mapping
!                 ---------------------------
                  call self % elements(eID) % SetMappings

               end do
!
!              Compute areas and volumes
!              -------------------------
               do eID = 1 , self % no_of_elements
                  associate ( e => self % elements(eID) )
                  e % Volume = BilinearForm_F ( e % jac , e % spA % w , e % spA % w )
                  end associate
               end do

               do edge = 1 , self % no_of_edges
                  associate ( ed => self % edges(edge) % f )
                     select type (ed)
                        type is (Edge_t)
                           ed % Area = sum( ed % dS(0) * ed % spA % w )
                           ed % invh = ed % Area / min( ed % quads(LEFT) % e % Volume , ed % quads(RIGHT) % e % Volume )

                        type is (CurvedEdge_t)
                           ed % Area = sum( ed % dS * ed % spA % w )
                           ed % invh = ed % Area / ed % quads(1) % e % Volume

                        type is (StraightBdryEdge_t)
                           ed % Area = sum( ed % dS(0) * ed % spA % w )
                           ed % invh = ed % Area / ed % quads(1) % e % Volume

                        type is (CurvedBdryEdge_t)
                           ed % Area = sum( ed % dS * ed % spA % w )
                           ed % invh = ed % Area / ed % quads(1) % e % Volume

                     end select
                  end associate
               end do

         end subroutine constructElementsAndEdges

         subroutine QuadMesh_SetStorage( self , storage )
            use Storage_module
            implicit none
            class(QuadMesh_t)             :: self
            class(Storage_t)            :: storage
            integer                     :: eID

            do eID = 1 , self % no_of_elements
                call self % elements(eID) % SetStorage( storage )
            end do

         end subroutine QuadMesh_SetStorage
