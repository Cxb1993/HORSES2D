         subroutine constructElementsAndEdges( self  , meshFile , spA , Storage , spI)
             use MeshFileClass
             use Setup_class
             use Physics
             use NodesAndWeights_Class
             use MatrixOperations
             implicit none
             class(QuadMesh_t),                 intent (inout)               :: self
             class(MeshFile_t),                 intent (in )                 :: meshFile
             class(NodalStorage),               intent (in )                 :: spA
             class(Storage_t),                  intent (in )                 :: storage
             class(NodesAndWeights_t), pointer, intent (in )                 :: spI
!            ----------------------------------------------------------------------
             integer                                  :: address
             integer                                  :: node
             integer                                  :: edge
             integer                                  :: eID
             integer                                  :: el1 , el2 , elb
             integer                                  :: polynomialOrder
             integer                                  :: curve
             type(Node_p)                             :: nodes(POINTS_PER_QUAD)
             logical                                  :: curvilinear
!            ----------------------------------------------------------------------
!
!            ===================
!            Construct elements
!            ===================
!
             do eID = 1 , self % no_of_elements
                 do node = 1 , POINTS_PER_QUAD
                    nodes(node) % n => self % nodes ( meshFile % points_of_elements(node , eID) ) 
                 end do


                 address = ( meshFile % cumulativePolynomialOrder(eID-1)  ) * NCONS + 1 
                 call self % elements(eID) % Construct( eID , nodes , meshFile % polynomialOrder(eID) , spA , address , storage , spI ) 

             end do
!
!            ================
!            Construct edges
!            ================
!
             do edge = 1 , self % no_of_edges

               do node = 1 , POINTS_PER_EDGE
                  nodes(node) % n => self % nodes ( meshFile % points_of_edges(node , edge) )
               end do

               if (meshFile % curvilinear) then
                  curvilinear = any(meshFile % curved_Edges == edge)
               else
                  curvilinear = .false.
               end if
!
!              Get its generic polynomial order: The largest within the neighbouring elements
!              ------------------------------------------------------------------------------
               if ( meshFile % elements_of_edges(1,edge) .eq. -1 ) then
                  polynomialOrder = self % elements( meshFile % elements_of_edges(2,edge) ) % spA % N
            
               elseif ( meshFile % elements_of_edges(2,edge) .eq. -1 ) then
                  polynomialOrder = self % elements( meshFile % elements_of_edges(1,edge) ) % spA % N

               else
                  polynomialOrder = self % elements( meshFile % elements_of_edges(1,edge) ) % spA % N
                  polynomialOrder = max ( polynomialOrder , self % elements( meshFile % elements_of_edges(2,edge) ) % spA % N )

               end if

               call self % edges(edge) % Construct( ID = edge , curvilinear = curvilinear , N = polynomialOrder , &
                                                nodes = nodes , edgeType = meshFile % edgeMarker(edge) , spA = spA , spI = spI )
!
!              *********************
               if (curvilinear) then
!              *********************
!
!
            
!              Add the curve to the edge
!              -------------------------
                  select type ( f => self % edges(edge) % f )

                     type is (Edge_t)
                        call self % edges(edge) % f % SetCurve()

                     type is (CurvedEdge_t)
                        curve = minloc(abs(meshFile % curved_Edges - edge) , dim = 1 ) 
                        call self % edges(edge) % f % SetCurve( meshFile % curvilinear_coords(:,:,curve) , meshFile % curves_polynomialorder )  

                     type is (StraightBdryEdge_t) 
                        call self % edges(edge) % f % SetCurve()

                     type is (CurvedBdryEdge_t) 
                        curve = minloc(abs(meshFile % curved_Edges -  edge) , dim = 1)
                        call self % edges(edge) % f % SetCurve( meshFile % curvilinear_coords(:,:,curve) , meshFile % curves_polynomialorder )  

                     class default

                  end select

               else
                  call self % edges(edge) % f % SetCurve()

               end if
             end do
!
!             ========================
!             Link elements with edges
!             ========================
!
              do edge = 1 , self % no_of_edges
                  if (self % edges(edge) % f % edgeType .eq. FACE_INTERIOR) then
                     el1 = meshFile % elements_of_edges( 1 , edge )
                     el2 = meshFile % elements_of_edges( 2 , edge )

                     call self % edges(edge) % linkWithElements( el1 = self % elements(el1) , el2 = self % elements(el2) )

                  else
                     
                     elb = meshFile % elements_of_edges( 1 , edge )
                     call self % edges(edge)  % linkWithElements( elb = self % elements(elb) )

                  end if
               end do
!
!              =================================
!              Compute the geometry of the quads
!              =================================
!
               do eID = 1 , self % no_of_elements
!
!                 Compute the element mapping
!                 ---------------------------
                  call self % elements(eID) % SetMappings

               end do
!
!              Compute areas and volumes
!              -------------------------
               do eID = 1 , self % no_of_elements
                  associate ( e => self % elements(eID) )
                  e % Volume = BilinearForm_F ( e % jac , e % spA % w , e % spA % w )
                  end associate
               end do

               do edge = 1 , self % no_of_edges
                  associate ( ed => self % edges(edge) % f )
                     select type (ed)
                        type is (Edge_t)
                           ed % Area = sum( ed % dS(0) * ed % spA % w )
                           ed % invh = ed % Area / min( ed % quads(LEFT) % e % Volume , ed % quads(RIGHT) % e % Volume )

                        type is (CurvedEdge_t)
                           ed % Area = sum( ed % dS * ed % spA % w )
                           ed % invh = ed % Area / ed % quads(1) % e % Volume

                        type is (StraightBdryEdge_t)
                           ed % Area = sum( ed % dS(0) * ed % spA % w )
                           ed % invh = ed % Area / ed % quads(1) % e % Volume

                        type is (CurvedBdryEdge_t)
                           ed % Area = sum( ed % dS * ed % spA % w )
                           ed % invh = ed % Area / ed % quads(1) % e % Volume

                     end select
                  end associate
               end do

               

         end subroutine constructElementsAndEdges

         subroutine QuadMesh_SetStorage( self , storage )
            use Storage_module
            implicit none
            class(QuadMesh_t)             :: self
            class(Storage_t)            :: storage
            integer                     :: eID

            do eID = 1 , self % no_of_elements
                call self % elements(eID) % SetStorage( storage )
            end do

         end subroutine QuadMesh_SetStorage
