!
!///////////////////////////////////////////////////////////////////////////////////
!
!           EULER WALL
!           ----------
!///////////////////////////////////////////////////////////////////////////////////
!
      subroutine EulerWall_Associate( self , edge ) 
         implicit none  
         class(EulerWall_t)                  :: self
         class(Edge_t)                       :: edge

         associate( N => edge % spA % N )
         select type ( edge )
         
            type is (Edge_t)
               print*, "Only boundary edges are expected."
               stop "Stopped"

            type is (StraightBdryEdge_t)
               allocate( edge % FB(0:N,NCONS) )
               allocate( edge % uB(0:N,NCONS) )
               allocate( edge % wB(0:N,NPRIM) )

               edge % BCWeakType = self % WeakType

               edge % RiemannSolver => self % RiemannSolver

#ifdef NAVIER_STOKES
!
!              Gradients are computed from the interior
!              ----------------------------------------
               edge % gB(0:,1:,1:) => edge % dQ(0:,1:,1:,1)
#endif
         
            type is (CurvedBdryEdge_t)
               allocate( edge % FB(0:N,NCONS) )
               allocate( edge % uB(0:N,NCONS) )
               allocate( edge % wB(0:N,NPRIM) )

               edge % BCWeakType = self % WeakType

               edge % RiemannSolver => self % RiemannSolver

               
#ifdef NAVIER_STOKES
!
!              Gradients are computed from the interior
!              ----------------------------------------
               edge % gB(0:,1:,1:) => edge % dQ(0:,1:,1:,1)
#endif

            class default
         end select
         end associate
                
      end subroutine EulerWall_Associate


      subroutine EulerWall_UpdateSolution( self , edge )
         implicit none  
         class(EulerWall_t)                  :: self
         class(Edge_t)                       :: edge
         real(kind=RP)                       :: q(NCONS) , F(NCONS,NDIM)
         real(kind=RP)                       :: rhovn , rhovt
         real(kind=RP)                       :: p
         integer                             :: iXi
         
         associate( N => edge % spA % N , gm1 => Thermodynamics % gm1 , gamma => Thermodynamics % gamma , Mach => Dimensionless % Mach )
   
         select type ( edge ) 
            type is (StraightBdryEdge_t)

               do iXi = 0 , N
!
!                 The flux is computed by substracting the normal velocity to the interior state. Pressure and density are gathered from the interior
!                 -----------------------------------------------------------------------------------------------------------------------------------
                  rhovn = (edge % Q(iXi,IRHOU,1) * edge % n(IX,iXi) + edge % Q(iXi,IRHOV,1) * edge % n(IY,iXi) )
                  rhovt = (edge % Q(iXi,IRHOU,1) * edge % n(IY,iXi) - edge % Q(iXi,IRHOV,1) * edge % n(IX,iXi) )
                  p     = gm1 * (edge % Q(iXi,IRHOE,1) - 0.5_RP * (edge % Q(iXi,IRHOU,1)*edge % Q(iXi,IRHOU,1) + edge % Q(iXi,IRHOV,1) * edge % Q(iXi,IRHOV,1)) / edge % Q(iXi,IRHO,1))

                  q(IRHO)  = edge % Q(iXi,IRHO,1)
                  q(IRHOU) = edge % Q(iXi,IRHOU,1) - rhovn * edge % n(IX,iXi)
                  q(IRHOV) = edge % Q(iXi,IRHOV,1) - rhovn * edge % n(IY,iXi)
                  q(IRHOE) = Dimensionless % cv * p + 0.5_RP * rhovt * rhovt / edge % Q(iXi,IRHO,1)
!
!                 Compute the fluxex from the built state
!                 ---------------------------------------
                  F = inviscidFlux( q )
!
!                 Compute the normal flux
!                 -----------------------
                  edge % FB(iXi,1:NCONS) = F(1:NCONS,IX) * edge % dS(IX,iXi) + F(1:NCONS,IY) * edge % dS(IY,iXi)
!
!                 Compute the variables state
!                 ---------------------------
                  edge % uB(iXi,IRHO)  = edge % Q(iXi,IRHO,1)
                  edge % uB(iXi,IRHOU) = edge % Q(iXi,IRHOU,1) - 2.0_RP * rhovn * edge % n(IX,iXi)
                  edge % uB(iXi,IRHOV) = edge % Q(iXi,IRHOV,1) - 2.0_RP * rhovn * edge % n(IY,iXi)
                  edge % uB(iXi,IRHOE) = edge % Q(iXi,IRHOE,1)

                  edge % wB(iXi,IRHO) = edge % Q(iXi,IRHO,1)
                  edge % wB(iXi,IU  ) = edge % uB(iXi,IRHOU) / edge % Q(iXi,IRHO,1)
                  edge % wB(iXi,IV  ) = edge % uB(iXi,IRHOV) / edge % Q(iXi,IRHO,1)
                  edge % wB(iXi,IP  ) = p
                  edge % wB(iXi,IT  ) = p / edge % wB(iXi,IRHO)
                  edge % wB(iXi,IA  ) = sqrt(gamma * edge % wB(iXi,IT) )

               end do
                  
         
            type is (CurvedBdryEdge_t)

               do iXi = 0 , N
!
!                 The flux is computed by substracting the normal velocity to the interior state. Pressure and density are gathered from the interior
!                 -----------------------------------------------------------------------------------------------------------------------------------
                  rhovn = (edge % Q(iXi,IRHOU,1) * edge % n(IX,iXi) + edge % Q(iXi,IRHOV,1) * edge % n(IY,iXi) )
                  rhovt = (edge % Q(iXi,IRHOU,1) * edge % n(IY,iXi) - edge % Q(iXi,IRHOV,1) * edge % n(IX,iXi) )
                  p     = gm1 * (edge % Q(iXi,IRHOE,1) - 0.5_RP * (edge % Q(iXi,IRHOU,1)*edge % Q(iXi,IRHOU,1) + edge % Q(iXi,IRHOV,1) * edge % Q(iXi,IRHOV,1)) / edge % Q(iXi,IRHO,1))

                  q(IRHO)  = edge % Q(iXi,IRHO,1)
                  q(IRHOU) = edge % Q(iXi,IRHOU,1) - rhovn * edge % n(IX,iXi)
                  q(IRHOV) = edge % Q(iXi,IRHOV,1) - rhovn * edge % n(IY,iXi)
                  q(IRHOE) = Dimensionless % cv * p + 0.5_RP * rhovt * rhovt / edge % Q(iXi,IRHO,1)
!
!                 Compute the fluxex from the built state
!                 ---------------------------------------
                  F = inviscidFlux( q )
!
!                 Compute the normal flux
!                 -----------------------
                  edge % FB(iXi,1:NCONS) = F(1:NCONS,IX) * edge % dS(IX,iXi) + F(1:NCONS,IY) * edge % dS(IY,iXi)
!
!                 Compute the variables state
!                 ---------------------------
                  edge % uB(iXi,IRHO)  = edge % Q(iXi,IRHO,1)
                  edge % uB(iXi,IRHOU) = edge % Q(iXi,IRHOU,1) - 2.0_RP * rhovn * edge % n(IX,iXi)
                  edge % uB(iXi,IRHOV) = edge % Q(iXi,IRHOV,1) - 2.0_RP * rhovn * edge % n(IY,iXi)
                  edge % uB(iXi,IRHOE) = edge % Q(iXi,IRHOE,1)

                  edge % wB(iXi,IRHO) = edge % Q(iXi,IRHO,1)
                  edge % wB(iXi,IU  ) = edge % uB(iXi,IRHOU) / edge % Q(iXi,IRHO,1)
                  edge % wB(iXi,IV  ) = edge % uB(iXi,IRHOV) / edge % Q(iXi,IRHO,1)
                  edge % wB(iXi,IP  ) = p
                  edge % wB(iXi,IT  ) = p / edge % wB(iXi,IRHO)
                  edge % wB(iXi,IA  ) = sqrt(gamma * edge % wB(iXi,IT) )

               end do
 
            class default
         end select

         end associate

      end subroutine EulerWall_UpdateSolution

