!
!///////////////////////////////////////////////////////////////////////////////////
!
!              RIEMANN BOUNDARY CONDITION
!              --------------------------
!///////////////////////////////////////////////////////////////////////////////////
!
      subroutine RiemannBC_Construct( self , marker , in_label)
         use Setup_class
         implicit none
         class(RiemannBC_t)         :: self
         integer                    :: marker
         character(len=*)           :: in_label
         real(kind=RP), allocatable :: pressure
         real(kind=RP), allocatable :: Temperature
         real(kind=RP), allocatable :: Mach
         real(kind=RP), allocatable :: AngleOfAttack
         real(kind=RP)              :: rho
         character(len=STR_LEN_BC)  :: mode

         call readValueInRegion( trim(Setup % bdry_file) , "pressure" , pressure , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Temperature", Temperature , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Mach" , Mach , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Angle of attack" , AngleOfAttack , in_label , "# end")
         call readValueInRegion( trim(Setup % bdry_file) , "Mode" , mode , in_label , "# end")
         
         if ( allocated(pressure) ) then
            pressure = pressure / refValues % p
         else
            allocate(pressure)
            pressure = 1.0_RP
         end if

         if ( allocated(Temperature) ) then
            Temperature = Temperature / refValues % T
         else
            allocate(Temperature)
            Temperature = 1.0_RP
         end if

         if ( .not. allocated(Mach) ) then
            allocate(Mach)
            Mach = Dimensionless % Mach
         end if

         if ( allocated(AngleOfAttack) ) then
            AngleOfAttack = AngleOfAttack * PI / 180.0_RP
         else
            allocate(AngleOfAttack)
            AngleOfAttack = 0.0_RP
         end if

         if ( trim(mode) .eq. "Velocity inlet" ) then
            self % mode = SPECIFY_SPEED
         elseif ( trim(mode) .eq. "Total pressure" ) then
            self % mode = SPECIFY_TOTAL_PRESSURE
         else        ! Default mode
            self % mode = SPECIFY_SPEED
         end if
!   
!        Construct the state vector
!        --------------------------
         associate ( gamma => Thermodynamics % Gamma , cv => Dimensionless % cv , gm1 => Thermodynamics % gm1 , gogm1 => Thermodynamics % gogm1 )

         rho = pressure / Temperature

         self % AngleOfAttack = AngleOfAttack
         self % Tt            = Temperature * ( 1.0_RP + 0.5_RP * gm1 * Mach * Mach)
         self % pt            = pressure * ( self % Tt / Temperature ) ** Dimensionless % cp
         self % Ht            = Temperature * Dimensionless % cp + 0.5_RP * gamma * Mach * Mach

         if ( self % mode .eq. SPECIFY_SPEED ) then
            self % q(IRHO)  = rho
            self % q(IRHOU) = rho * sqrt(gamma) * Mach * cos(AngleOfAttack)
            self % q(IRHOV) = rho * sqrt(gamma) * Mach * sin(AngleOfAttack)
            self % q(IRHOE) = cv * pressure + 0.5_RP * rho * gamma * Mach * Mach

         elseif ( self % mode .eq. SPECIFY_TOTAL_PRESSURE ) then
            self % q(IRHO)  = self % pt / self % Tt
            self % q(IRHOU) = 0.0_RP
            self % q(IRHOV) = 0.0_RP
            self % q(IRHOE) = cv * self % pt
         else
            print*, "Unknown mode"
            stop "Stopped."
         end if

         end associate

      end subroutine RiemannBC_Construct

      subroutine RiemannBC_Associate(self , edge)
!
!        *****************************************************
!           This is a weakly-prescribed boundary condition.
!              Thus, self % FB, the fluxes, is allocated.
!        *****************************************************
!
         implicit none
         class(RiemannBC_t) :: self
         class(Edge_t)      :: edge
         integer            :: i

         associate ( N => edge % spA % N )

         select type ( edge )
         
            type is (Edge_t)
               print*, "Only boundary edges are expected."
               stop "Stopped"
      
            type is (StraightBdryEdge_t)
               allocate ( edge % FB(0:N,NCONS) ) 
               
               do i = 0 , N
                  edge % FB(i , 1:NCONS) = 0.0_RP      ! Its value is not given until the update routine is invoked
               end do

   
            type is (CurvedBdryEdge_t)
               allocate ( edge % FB(0:N,NCONS) ) 
               
               do i = 0 , N
                  edge % FB(i , 1:NCONS) = 0.0_RP      ! Its value is not given until the update routine is invoked
               end do

         end select
         end associate

      end subroutine RiemannBC_Associate

      subroutine RiemannBC_Update( self , edge )
         implicit none
         class(RiemannBC_t)          :: self
         class(Edge_t)                       :: edge
         integer                       :: iXi
         integer                    :: N 
         real(kind=RP)              :: rhoL , vnL , uL , vL , pL , ML , aL  , TL , Rplus
         real(kind=RP)              :: rhoR , vnR , uR , vR , pR , VtR , TR , aR , MR , sR
         real(kind=RP)              :: rhoInfty, uInfty, vInfty , pInfty  , vnInfty , aInfty
         real(kind=RP)              :: nInfty(NDIM)
         real(kind=RP)              :: F(NCONS , NDIM)
         real(kind=RP)              :: q(NCONS)
!

         associate ( gamma => Thermodynamics % gamma , gm1 => Thermodynamics % gm1 , cp => Dimensionless % cp , cv => Dimensionless % cv)

         rhoInfty = self % q(IRHO)
         uInfty   = self % q(IRHOU) / rhoInfty
         vInfty   = self % q(IRHOV) / rhoInfty
         pInfty   = gm1 * ( self % q(IRHOE) - 0.5_RP * self % q(IRHOU) * uInfty - 0.5_RP * self % q(IRHOV) * vInfty )
         aInfty   = sqrt(gamma * pInfty / rhoInfty)
         nInfty   = [cos(self % AngleOfAttack) , sin(self % AngleOfAttack)]
         

         N = edge % spA % N

         select type ( edge )
            type is (StraightBdryEdge_t) 
               do iXi = 0 , N
!
!                 First stage: Determine the boundary flow character
!                 --------------------------------------------------
                  rhoL = edge % Q(iXi , IRHO , 1)
                  uL  = edge % Q(iXi , IRHOU , 1) / rhoL
                  vL  = edge % Q(iXi , IRHOV , 1) / rhoL
                  vnL = uL * edge % n (IX , iXi) + vL * edge % n(IY, iXi)
                  pL  = gm1 * ( edge % Q(iXi , IRHOE , 1) - 0.5_RP * edge % Q(iXi,IRHOU , 1) * uL - 0.5_RP * edge % Q(iXi,IRHOV , 1) * vL )
                  aL  = sqrt( gamma * pL / rhoL ) 
                  TL  = pL / rhoL
                  ML  = vnL / aL

                  vnInfty = uInfty * edge % n (IX , iXi) + vInfty * edge % n(IY, iXi)
!
!                 Second stage: Compute the "Right" state depending on the result
!                 ---------------------------------------------------------------
                  if ( ML .lt. -1.0_RP ) then      ! Supersonic inflow

                     F = inviscidFlux(self % q)
                     edge % FB(iXi,1:NCONS) = F(1:NCONS,IX) * edge % dS(IX,iXi) + F(1:NCONS , IY) * edge % dS(IY,iXi)
               
                  elseif ( ML .le. 0.0_RP ) then   ! Subsonic inflow

                     self % Rminus = vnInfty - 2.0_RP * cv * aInfty
                     Rplus = vnL + 2.0_RP * cv * aL

                     vnR = 0.5_RP * (Rplus + self % Rminus)
                     aR  = 0.25_RP * gm1 * (Rplus - self % Rminus)
                     uR  = vnR * nInfty(IX)
                     vR  = vnR * nInfty(IY)
                     sR   = (aInfty*aInfty) / (gamma * (rhoInfty ** gm1) ) 
                     rhoR = aR * aR / ( gamma * sR )
                     pR   = rhoR * aR * aR / gamma
                      
                     q(IRHO) = rhoR
                     q(IRHOU) = rhoR * uR
                     q(IRHOV) = rhoR * vR
                     q(IRHOE) = cv * pR + 0.5_RP * ( q(IRHOU) * uR + q(IRHOV) * vR )

                     F = inviscidFlux( q )
                     edge % FB(iXi,1:NCONS) = F(1:NCONS,IX) * edge % dS(IX,iXi) + F(1:NCONS , IY) * edge % dS(IY,iXi)
                     
                  elseif ( ML .lt. 1.0_RP ) then   ! Subsonic outflow

                     self % Rminus = vnInfty - 2.0_RP * cv * aInfty
                     Rplus = vnL + 2.0_RP * cv * aL

                     vnR = 0.5_RP * (Rplus + self % Rminus)
                     aR  = 0.25_RP * gm1 * (Rplus - self % Rminus)
   
                     uR = uL + (vnR - vnL) * edge % n(IX,iXi)
                     vR = vL + (vnR - vnL) * edge % n(IY,iXi)

                     sR   = (aL*aL) / (gamma * (rhoL ** gm1) ) 
                     rhoR = aR * aR / ( gamma * sR )
                     pR   = rhoR * aR * aR / gamma

                     q(IRHO) = rhoR
                     q(IRHOU) = rhoR * uR * uR
                     q(IRHOV) = rhoR * vR * vR
                     q(IRHOE) = cv * pR + 0.5_RP * (rhoR * uR * uR + rhoR * vR * vR )

                     F = inviscidFlux( q )
                     edge % FB(iXi,1:NCONS) = F(1:NCONS,IX) * edge % dS(IX,iXi) + F(1:NCONS , IY) * edge % dS(IY,iXi)

                  elseif ( ML .ge. 1.0_RP ) then   ! Supersonic outflow

                     F = inviscidFlux(edge % Q(iXi,1:NCONS,1))
                     edge % FB(iXi,1:NCONS) = F(1:NCONS,IX) * edge % dS(IX,iXi) + F(1:NCONS , IY) * edge % dS(IY,iXi)
      
                  end if
               
      
               end do 

            type is (CurvedBdryEdge_t) 
               do iXi = 0 , N
!
!                 First stage: Determine the boundary flow character
!                 --------------------------------------------------
                  rhoL = edge % Q(iXi , IRHO , 1)
                  uL  = edge % Q(iXi , IRHOU , 1) / rhoL
                  vL  = edge % Q(iXi , IRHOV , 1) / rhoL
                  vnL = uL * edge % n (IX , iXi) + vL * edge % n(IY, iXi)
                  pL  = gm1 * ( edge % Q(iXi , IRHOE , 1) - 0.5_RP * edge % Q(iXi,IRHOU , 1) * uL - 0.5_RP * edge % Q(iXi,IRHOV , 1) * vL )
                  aL  = sqrt( gamma * pL / rhoL ) 
                  TL  = pL / rhoL
                  ML  = vnL / aL

                  vnInfty = uInfty * edge % n (IX , iXi) + vInfty * edge % n(IY, iXi)
!
!                 Second stage: Compute the "Right" state depending on the result
!                 ---------------------------------------------------------------
                  if ( ML .lt. -1.0_RP ) then      ! Supersonic inflow

                     F = inviscidFlux(self % q)
                     edge % FB(iXi,1:NCONS) = F(1:NCONS,IX) * edge % dS(IX,iXi) + F(1:NCONS , IY) * edge % dS(IY,iXi)
               
                  elseif ( ML .le. 0.0_RP ) then   ! Subsonic inflow

                     self % Rminus = vnInfty - 2.0_RP * cv * aInfty
                     Rplus = vnL + 2.0_RP * cv * aL

                     vnR = 0.5_RP * (Rplus + self % Rminus)
                     aR  = 0.25_RP * gm1 * (Rplus - self % Rminus)
                     uR  = vnR * nInfty(IX)
                     vR  = vnR * nInfty(IY)
                     sR   = (aInfty*aInfty) / (gamma * (rhoInfty ** gm1) ) 
                     rhoR = aR * aR / ( gamma * sR )
                     pR   = rhoR * aR * aR / gamma
                      
                     q(IRHO) = rhoR
                     q(IRHOU) = rhoR * uR
                     q(IRHOV) = rhoR * vR
                     q(IRHOE) = cv * pR + 0.5_RP * ( q(IRHOU) * uR + q(IRHOV) * vR )

                     F = inviscidFlux( q )
                     edge % FB(iXi,1:NCONS) = F(1:NCONS,IX) * edge % dS(IX,iXi) + F(1:NCONS , IY) * edge % dS(IY,iXi)
                     
                  elseif ( ML .lt. 1.0_RP ) then   ! Subsonic outflow

                     self % Rminus = vnInfty - 2.0_RP * cv * aInfty
                     Rplus = vnL + 2.0_RP * cv * aL

                     vnR = 0.5_RP * (Rplus + self % Rminus)
                     aR  = 0.25_RP * gm1 * (Rplus - self % Rminus)
   
                     uR = uL + (vnR - vnL) * edge % n(IX,iXi)
                     vR = vL + (vnR - vnL) * edge % n(IY,iXi)

                     sR   = (aL*aL) / (gamma * (rhoL ** gm1) ) 
                     rhoR = aR * aR / ( gamma * sR )
                     pR   = rhoR * aR * aR / gamma

                     q(IRHO) = rhoR
                     q(IRHOU) = rhoR * uR
                     q(IRHOV) = rhoR * vR
                     q(IRHOE) = cv * pR + 0.5_RP * (q(IRHOU) * uR + q(IRHOV) * vR )

                     F = inviscidFlux( q )
                     edge % FB(iXi,1:NCONS) = F(1:NCONS,IX) * edge % dS(IX,iXi) + F(1:NCONS , IY) * edge % dS(IY,iXi)

                  elseif ( ML .ge. 1.0_RP ) then   ! Supersonic outflow

                     F = inviscidFlux(edge % Q(iXi,1:NCONS,1))
                     edge % FB(iXi,1:NCONS) = F(1:NCONS,IX) * edge % dS(IX,iXi) + F(1:NCONS , IY) * edge % dS(IY,iXi)
      
                  end if
               
      
               end do 

            class default
         end select



         end associate

      end subroutine RiemannBC_Update


